/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Provides properties that describe a workspace.
    /// </summary>
    [DataContract]
    public partial class Workspace :  IEquatable<Workspace>, IValidatableObject
    {
        public Workspace()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        /// <param name="BillableAccountId">.</param>
        /// <param name="Created">.</param>
        /// <param name="CreatedByInformation">CreatedByInformation.</param>
        /// <param name="LastModified">Utc date and time the comment was last updated (can only be done by creator.).</param>
        /// <param name="LastModifiedByInformation">LastModifiedByInformation.</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="WorkspaceBaseUrl">The relative URL that may be used to access the workspace..</param>
        /// <param name="WorkspaceDescription">Text describing the purpose of the workspace..</param>
        /// <param name="WorkspaceId">The id of the workspace, always populated..</param>
        /// <param name="WorkspaceName">The name of the workspace..</param>
        /// <param name="WorkspaceUri">The relative URI that may be used to access the workspace..</param>
        public Workspace(string BillableAccountId = default(string), string Created = default(string), WorkspaceUser CreatedByInformation = default(WorkspaceUser), string LastModified = default(string), WorkspaceUser LastModifiedByInformation = default(WorkspaceUser), string Status = default(string), string WorkspaceBaseUrl = default(string), string WorkspaceDescription = default(string), string WorkspaceId = default(string), string WorkspaceName = default(string), string WorkspaceUri = default(string))
        {
            this.BillableAccountId = BillableAccountId;
            this.Created = Created;
            this.CreatedByInformation = CreatedByInformation;
            this.LastModified = LastModified;
            this.LastModifiedByInformation = LastModifiedByInformation;
            this.Status = Status;
            this.WorkspaceBaseUrl = WorkspaceBaseUrl;
            this.WorkspaceDescription = WorkspaceDescription;
            this.WorkspaceId = WorkspaceId;
            this.WorkspaceName = WorkspaceName;
            this.WorkspaceUri = WorkspaceUri;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="billableAccountId", EmitDefaultValue=false)]
        public string BillableAccountId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByInformation
        /// </summary>
        [DataMember(Name="createdByInformation", EmitDefaultValue=false)]
        public WorkspaceUser CreatedByInformation { get; set; }
        /// <summary>
        /// Utc date and time the comment was last updated (can only be done by creator.)
        /// </summary>
        /// <value>Utc date and time the comment was last updated (can only be done by creator.)</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public string LastModified { get; set; }
        /// <summary>
        /// Gets or Sets LastModifiedByInformation
        /// </summary>
        [DataMember(Name="lastModifiedByInformation", EmitDefaultValue=false)]
        public WorkspaceUser LastModifiedByInformation { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The relative URL that may be used to access the workspace.
        /// </summary>
        /// <value>The relative URL that may be used to access the workspace.</value>
        [DataMember(Name="workspaceBaseUrl", EmitDefaultValue=false)]
        public string WorkspaceBaseUrl { get; set; }
        /// <summary>
        /// Text describing the purpose of the workspace.
        /// </summary>
        /// <value>Text describing the purpose of the workspace.</value>
        [DataMember(Name="workspaceDescription", EmitDefaultValue=false)]
        public string WorkspaceDescription { get; set; }
        /// <summary>
        /// The id of the workspace, always populated.
        /// </summary>
        /// <value>The id of the workspace, always populated.</value>
        [DataMember(Name="workspaceId", EmitDefaultValue=false)]
        public string WorkspaceId { get; set; }
        /// <summary>
        /// The name of the workspace.
        /// </summary>
        /// <value>The name of the workspace.</value>
        [DataMember(Name="workspaceName", EmitDefaultValue=false)]
        public string WorkspaceName { get; set; }
        /// <summary>
        /// The relative URI that may be used to access the workspace.
        /// </summary>
        /// <value>The relative URI that may be used to access the workspace.</value>
        [DataMember(Name="workspaceUri", EmitDefaultValue=false)]
        public string WorkspaceUri { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workspace {\n");
            sb.Append("  BillableAccountId: ").Append(BillableAccountId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedByInformation: ").Append(CreatedByInformation).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedByInformation: ").Append(LastModifiedByInformation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WorkspaceBaseUrl: ").Append(WorkspaceBaseUrl).Append("\n");
            sb.Append("  WorkspaceDescription: ").Append(WorkspaceDescription).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  WorkspaceName: ").Append(WorkspaceName).Append("\n");
            sb.Append("  WorkspaceUri: ").Append(WorkspaceUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Workspace);
        }

        /// <summary>
        /// Returns true if Workspace instances are equal
        /// </summary>
        /// <param name="other">Instance of Workspace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workspace other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BillableAccountId == other.BillableAccountId ||
                    this.BillableAccountId != null &&
                    this.BillableAccountId.Equals(other.BillableAccountId)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.CreatedByInformation == other.CreatedByInformation ||
                    this.CreatedByInformation != null &&
                    this.CreatedByInformation.Equals(other.CreatedByInformation)
                ) && 
                (
                    this.LastModified == other.LastModified ||
                    this.LastModified != null &&
                    this.LastModified.Equals(other.LastModified)
                ) && 
                (
                    this.LastModifiedByInformation == other.LastModifiedByInformation ||
                    this.LastModifiedByInformation != null &&
                    this.LastModifiedByInformation.Equals(other.LastModifiedByInformation)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.WorkspaceBaseUrl == other.WorkspaceBaseUrl ||
                    this.WorkspaceBaseUrl != null &&
                    this.WorkspaceBaseUrl.Equals(other.WorkspaceBaseUrl)
                ) && 
                (
                    this.WorkspaceDescription == other.WorkspaceDescription ||
                    this.WorkspaceDescription != null &&
                    this.WorkspaceDescription.Equals(other.WorkspaceDescription)
                ) && 
                (
                    this.WorkspaceId == other.WorkspaceId ||
                    this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(other.WorkspaceId)
                ) && 
                (
                    this.WorkspaceName == other.WorkspaceName ||
                    this.WorkspaceName != null &&
                    this.WorkspaceName.Equals(other.WorkspaceName)
                ) && 
                (
                    this.WorkspaceUri == other.WorkspaceUri ||
                    this.WorkspaceUri != null &&
                    this.WorkspaceUri.Equals(other.WorkspaceUri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BillableAccountId != null)
                    hash = hash * 59 + this.BillableAccountId.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.CreatedByInformation != null)
                    hash = hash * 59 + this.CreatedByInformation.GetHashCode();
                if (this.LastModified != null)
                    hash = hash * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedByInformation != null)
                    hash = hash * 59 + this.LastModifiedByInformation.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.WorkspaceBaseUrl != null)
                    hash = hash * 59 + this.WorkspaceBaseUrl.GetHashCode();
                if (this.WorkspaceDescription != null)
                    hash = hash * 59 + this.WorkspaceDescription.GetHashCode();
                if (this.WorkspaceId != null)
                    hash = hash * 59 + this.WorkspaceId.GetHashCode();
                if (this.WorkspaceName != null)
                    hash = hash * 59 + this.WorkspaceName.GetHashCode();
                if (this.WorkspaceUri != null)
                    hash = hash * 59 + this.WorkspaceUri.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
