/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DocumentUpdateInfo
    /// </summary>
    [DataContract]
    public partial class DocumentUpdateInfo :  IEquatable<DocumentUpdateInfo>, IValidatableObject
    {
        public DocumentUpdateInfo()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentUpdateInfo" /> class.
        /// </summary>
        /// <param name="Data">.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentSecurityStore">DocumentSecurityStore.</param>
        /// <param name="Name">.</param>
        /// <param name="ReturnFormat">.</param>
        /// <param name="SignatureDataInfos">.</param>
        /// <param name="TimeStampField">TimeStampField.</param>
        public DocumentUpdateInfo(string Data = default(string), string DocumentId = default(string), DocumentSecurityStore DocumentSecurityStore = default(DocumentSecurityStore), string Name = default(string), string ReturnFormat = default(string), List<SignatureDataInfo> SignatureDataInfos = default(List<SignatureDataInfo>), TimeStampField TimeStampField = default(TimeStampField))
        {
            this.Data = Data;
            this.DocumentId = DocumentId;
            this.DocumentSecurityStore = DocumentSecurityStore;
            this.Name = Name;
            this.ReturnFormat = ReturnFormat;
            this.SignatureDataInfos = SignatureDataInfos;
            this.TimeStampField = TimeStampField;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentSecurityStore
        /// </summary>
        [DataMember(Name="documentSecurityStore", EmitDefaultValue=false)]
        public DocumentSecurityStore DocumentSecurityStore { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="returnFormat", EmitDefaultValue=false)]
        public string ReturnFormat { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signatureDataInfos", EmitDefaultValue=false)]
        public List<SignatureDataInfo> SignatureDataInfos { get; set; }
        /// <summary>
        /// Gets or Sets TimeStampField
        /// </summary>
        [DataMember(Name="timeStampField", EmitDefaultValue=false)]
        public TimeStampField TimeStampField { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentUpdateInfo {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentSecurityStore: ").Append(DocumentSecurityStore).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReturnFormat: ").Append(ReturnFormat).Append("\n");
            sb.Append("  SignatureDataInfos: ").Append(SignatureDataInfos).Append("\n");
            sb.Append("  TimeStampField: ").Append(TimeStampField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocumentUpdateInfo);
        }

        /// <summary>
        /// Returns true if DocumentUpdateInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentUpdateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentUpdateInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentSecurityStore == other.DocumentSecurityStore ||
                    this.DocumentSecurityStore != null &&
                    this.DocumentSecurityStore.Equals(other.DocumentSecurityStore)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ReturnFormat == other.ReturnFormat ||
                    this.ReturnFormat != null &&
                    this.ReturnFormat.Equals(other.ReturnFormat)
                ) && 
                (
                    this.SignatureDataInfos == other.SignatureDataInfos ||
                    this.SignatureDataInfos != null &&
                    this.SignatureDataInfos.SequenceEqual(other.SignatureDataInfos)
                ) && 
                (
                    this.TimeStampField == other.TimeStampField ||
                    this.TimeStampField != null &&
                    this.TimeStampField.Equals(other.TimeStampField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentSecurityStore != null)
                    hash = hash * 59 + this.DocumentSecurityStore.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ReturnFormat != null)
                    hash = hash * 59 + this.ReturnFormat.GetHashCode();
                if (this.SignatureDataInfos != null)
                    hash = hash * 59 + this.SignatureDataInfos.GetHashCode();
                if (this.TimeStampField != null)
                    hash = hash * 59 + this.TimeStampField.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
