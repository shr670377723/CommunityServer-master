/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Defines a billing payment request object.
    /// </summary>
    [DataContract]
    public partial class BillingPaymentItem :  IEquatable<BillingPaymentItem>, IValidatableObject
    {
        public BillingPaymentItem()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPaymentItem" /> class.
        /// </summary>
        /// <param name="Amount">Reserved: TBD.</param>
        /// <param name="Description">.</param>
        /// <param name="PaymentDate">.</param>
        /// <param name="PaymentId">.</param>
        /// <param name="PaymentNumber">When set to **true**, a PDF version of the invoice is available.   To get the PDF, make the call again and change \&quot;Accept:\&quot; in the header to \&quot;Accept: application/pdf\&quot;..</param>
        public BillingPaymentItem(string Amount = default(string), string Description = default(string), string PaymentDate = default(string), string PaymentId = default(string), string PaymentNumber = default(string))
        {
            this.Amount = Amount;
            this.Description = Description;
            this.PaymentDate = PaymentDate;
            this.PaymentId = PaymentId;
            this.PaymentNumber = PaymentNumber;
        }
        
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public string PaymentDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentId", EmitDefaultValue=false)]
        public string PaymentId { get; set; }
        /// <summary>
        /// When set to **true**, a PDF version of the invoice is available.   To get the PDF, make the call again and change \&quot;Accept:\&quot; in the header to \&quot;Accept: application/pdf\&quot;.
        /// </summary>
        /// <value>When set to **true**, a PDF version of the invoice is available.   To get the PDF, make the call again and change \&quot;Accept:\&quot; in the header to \&quot;Accept: application/pdf\&quot;.</value>
        [DataMember(Name="paymentNumber", EmitDefaultValue=false)]
        public string PaymentNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPaymentItem {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentNumber: ").Append(PaymentNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingPaymentItem);
        }

        /// <summary>
        /// Returns true if BillingPaymentItem instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingPaymentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPaymentItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.PaymentDate == other.PaymentDate ||
                    this.PaymentDate != null &&
                    this.PaymentDate.Equals(other.PaymentDate)
                ) && 
                (
                    this.PaymentId == other.PaymentId ||
                    this.PaymentId != null &&
                    this.PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    this.PaymentNumber == other.PaymentNumber ||
                    this.PaymentNumber != null &&
                    this.PaymentNumber.Equals(other.PaymentNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.PaymentDate != null)
                    hash = hash * 59 + this.PaymentDate.GetHashCode();
                if (this.PaymentId != null)
                    hash = hash * 59 + this.PaymentId.GetHashCode();
                if (this.PaymentNumber != null)
                    hash = hash * 59 + this.PaymentNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
