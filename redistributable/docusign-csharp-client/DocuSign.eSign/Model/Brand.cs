/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Brand
    /// </summary>
    [DataContract]
    public partial class Brand :  IEquatable<Brand>, IValidatableObject
    {
        public Brand()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        /// <param name="BrandCompany">The name of the company associated with this brand..</param>
        /// <param name="BrandId">The ID used to identify a specific brand in API calls..</param>
        /// <param name="BrandName">The name of the brand..</param>
        /// <param name="Colors">.</param>
        /// <param name="EmailContent">.</param>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="IsOverridingCompanyName">.</param>
        /// <param name="IsSendingDefault">.</param>
        /// <param name="IsSigningDefault">.</param>
        /// <param name="LandingPages">.</param>
        /// <param name="Links">.</param>
        /// <param name="Logos">Logos.</param>
        /// <param name="Resources">Resources.</param>
        public Brand(string BrandCompany = default(string), string BrandId = default(string), string BrandName = default(string), List<NameValue> Colors = default(List<NameValue>), List<BrandEmailContent> EmailContent = default(List<BrandEmailContent>), ErrorDetails ErrorDetails = default(ErrorDetails), string IsOverridingCompanyName = default(string), string IsSendingDefault = default(string), string IsSigningDefault = default(string), List<NameValue> LandingPages = default(List<NameValue>), List<BrandLink> Links = default(List<BrandLink>), BrandLogos Logos = default(BrandLogos), BrandResourceUrls Resources = default(BrandResourceUrls))
        {
            this.BrandCompany = BrandCompany;
            this.BrandId = BrandId;
            this.BrandName = BrandName;
            this.Colors = Colors;
            this.EmailContent = EmailContent;
            this.ErrorDetails = ErrorDetails;
            this.IsOverridingCompanyName = IsOverridingCompanyName;
            this.IsSendingDefault = IsSendingDefault;
            this.IsSigningDefault = IsSigningDefault;
            this.LandingPages = LandingPages;
            this.Links = Links;
            this.Logos = Logos;
            this.Resources = Resources;
        }
        
        /// <summary>
        /// The name of the company associated with this brand.
        /// </summary>
        /// <value>The name of the company associated with this brand.</value>
        [DataMember(Name="brandCompany", EmitDefaultValue=false)]
        public string BrandCompany { get; set; }
        /// <summary>
        /// The ID used to identify a specific brand in API calls.
        /// </summary>
        /// <value>The ID used to identify a specific brand in API calls.</value>
        [DataMember(Name="brandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }
        /// <summary>
        /// The name of the brand.
        /// </summary>
        /// <value>The name of the brand.</value>
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="colors", EmitDefaultValue=false)]
        public List<NameValue> Colors { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="emailContent", EmitDefaultValue=false)]
        public List<BrandEmailContent> EmailContent { get; set; }
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isOverridingCompanyName", EmitDefaultValue=false)]
        public string IsOverridingCompanyName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isSendingDefault", EmitDefaultValue=false)]
        public string IsSendingDefault { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isSigningDefault", EmitDefaultValue=false)]
        public string IsSigningDefault { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="landingPages", EmitDefaultValue=false)]
        public List<NameValue> LandingPages { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<BrandLink> Links { get; set; }
        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [DataMember(Name="logos", EmitDefaultValue=false)]
        public BrandLogos Logos { get; set; }
        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public BrandResourceUrls Resources { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Brand {\n");
            sb.Append("  BrandCompany: ").Append(BrandCompany).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  EmailContent: ").Append(EmailContent).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  IsOverridingCompanyName: ").Append(IsOverridingCompanyName).Append("\n");
            sb.Append("  IsSendingDefault: ").Append(IsSendingDefault).Append("\n");
            sb.Append("  IsSigningDefault: ").Append(IsSigningDefault).Append("\n");
            sb.Append("  LandingPages: ").Append(LandingPages).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Brand);
        }

        /// <summary>
        /// Returns true if Brand instances are equal
        /// </summary>
        /// <param name="other">Instance of Brand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Brand other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BrandCompany == other.BrandCompany ||
                    this.BrandCompany != null &&
                    this.BrandCompany.Equals(other.BrandCompany)
                ) && 
                (
                    this.BrandId == other.BrandId ||
                    this.BrandId != null &&
                    this.BrandId.Equals(other.BrandId)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.Colors == other.Colors ||
                    this.Colors != null &&
                    this.Colors.SequenceEqual(other.Colors)
                ) && 
                (
                    this.EmailContent == other.EmailContent ||
                    this.EmailContent != null &&
                    this.EmailContent.SequenceEqual(other.EmailContent)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.IsOverridingCompanyName == other.IsOverridingCompanyName ||
                    this.IsOverridingCompanyName != null &&
                    this.IsOverridingCompanyName.Equals(other.IsOverridingCompanyName)
                ) && 
                (
                    this.IsSendingDefault == other.IsSendingDefault ||
                    this.IsSendingDefault != null &&
                    this.IsSendingDefault.Equals(other.IsSendingDefault)
                ) && 
                (
                    this.IsSigningDefault == other.IsSigningDefault ||
                    this.IsSigningDefault != null &&
                    this.IsSigningDefault.Equals(other.IsSigningDefault)
                ) && 
                (
                    this.LandingPages == other.LandingPages ||
                    this.LandingPages != null &&
                    this.LandingPages.SequenceEqual(other.LandingPages)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                ) && 
                (
                    this.Logos == other.Logos ||
                    this.Logos != null &&
                    this.Logos.Equals(other.Logos)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.Equals(other.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BrandCompany != null)
                    hash = hash * 59 + this.BrandCompany.GetHashCode();
                if (this.BrandId != null)
                    hash = hash * 59 + this.BrandId.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.Colors != null)
                    hash = hash * 59 + this.Colors.GetHashCode();
                if (this.EmailContent != null)
                    hash = hash * 59 + this.EmailContent.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.IsOverridingCompanyName != null)
                    hash = hash * 59 + this.IsOverridingCompanyName.GetHashCode();
                if (this.IsSendingDefault != null)
                    hash = hash * 59 + this.IsSendingDefault.GetHashCode();
                if (this.IsSigningDefault != null)
                    hash = hash * 59 + this.IsSigningDefault.GetHashCode();
                if (this.LandingPages != null)
                    hash = hash * 59 + this.LandingPages.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Logos != null)
                    hash = hash * 59 + this.Logos.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
