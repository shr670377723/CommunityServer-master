/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// AccountPasswordRules
    /// </summary>
    [DataContract]
    public partial class AccountPasswordRules :  IEquatable<AccountPasswordRules>, IValidatableObject
    {
        public AccountPasswordRules()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPasswordRules" /> class.
        /// </summary>
        /// <param name="ExpirePassword">.</param>
        /// <param name="ExpirePasswordDays">.</param>
        /// <param name="ExpirePasswordDaysMetadata">ExpirePasswordDaysMetadata.</param>
        /// <param name="LockoutDurationMinutes">.</param>
        /// <param name="LockoutDurationMinutesMetadata">LockoutDurationMinutesMetadata.</param>
        /// <param name="LockoutDurationType">.</param>
        /// <param name="LockoutDurationTypeMetadata">LockoutDurationTypeMetadata.</param>
        /// <param name="MinimumPasswordAgeDays">.</param>
        /// <param name="MinimumPasswordAgeDaysMetadata">MinimumPasswordAgeDaysMetadata.</param>
        /// <param name="MinimumPasswordLength">.</param>
        /// <param name="MinimumPasswordLengthMetadata">MinimumPasswordLengthMetadata.</param>
        /// <param name="PasswordIncludeDigit">.</param>
        /// <param name="PasswordIncludeDigitOrSpecialCharacter">.</param>
        /// <param name="PasswordIncludeLowerCase">.</param>
        /// <param name="PasswordIncludeSpecialCharacter">.</param>
        /// <param name="PasswordIncludeUpperCase">.</param>
        /// <param name="PasswordStrengthType">.</param>
        /// <param name="PasswordStrengthTypeMetadata">PasswordStrengthTypeMetadata.</param>
        /// <param name="QuestionsRequired">.</param>
        /// <param name="QuestionsRequiredMetadata">QuestionsRequiredMetadata.</param>
        public AccountPasswordRules(string ExpirePassword = default(string), string ExpirePasswordDays = default(string), AccountPasswordExpirePasswordDays ExpirePasswordDaysMetadata = default(AccountPasswordExpirePasswordDays), string LockoutDurationMinutes = default(string), AccountPasswordLockoutDurationMinutes LockoutDurationMinutesMetadata = default(AccountPasswordLockoutDurationMinutes), string LockoutDurationType = default(string), AccountPasswordLockoutDurationType LockoutDurationTypeMetadata = default(AccountPasswordLockoutDurationType), string MinimumPasswordAgeDays = default(string), AccountPasswordMinimumPasswordAgeDays MinimumPasswordAgeDaysMetadata = default(AccountPasswordMinimumPasswordAgeDays), string MinimumPasswordLength = default(string), AccountMinimumPasswordLength MinimumPasswordLengthMetadata = default(AccountMinimumPasswordLength), string PasswordIncludeDigit = default(string), string PasswordIncludeDigitOrSpecialCharacter = default(string), string PasswordIncludeLowerCase = default(string), string PasswordIncludeSpecialCharacter = default(string), string PasswordIncludeUpperCase = default(string), string PasswordStrengthType = default(string), AccountPasswordStrengthType PasswordStrengthTypeMetadata = default(AccountPasswordStrengthType), string QuestionsRequired = default(string), AccountPasswordQuestionsRequired QuestionsRequiredMetadata = default(AccountPasswordQuestionsRequired))
        {
            this.ExpirePassword = ExpirePassword;
            this.ExpirePasswordDays = ExpirePasswordDays;
            this.ExpirePasswordDaysMetadata = ExpirePasswordDaysMetadata;
            this.LockoutDurationMinutes = LockoutDurationMinutes;
            this.LockoutDurationMinutesMetadata = LockoutDurationMinutesMetadata;
            this.LockoutDurationType = LockoutDurationType;
            this.LockoutDurationTypeMetadata = LockoutDurationTypeMetadata;
            this.MinimumPasswordAgeDays = MinimumPasswordAgeDays;
            this.MinimumPasswordAgeDaysMetadata = MinimumPasswordAgeDaysMetadata;
            this.MinimumPasswordLength = MinimumPasswordLength;
            this.MinimumPasswordLengthMetadata = MinimumPasswordLengthMetadata;
            this.PasswordIncludeDigit = PasswordIncludeDigit;
            this.PasswordIncludeDigitOrSpecialCharacter = PasswordIncludeDigitOrSpecialCharacter;
            this.PasswordIncludeLowerCase = PasswordIncludeLowerCase;
            this.PasswordIncludeSpecialCharacter = PasswordIncludeSpecialCharacter;
            this.PasswordIncludeUpperCase = PasswordIncludeUpperCase;
            this.PasswordStrengthType = PasswordStrengthType;
            this.PasswordStrengthTypeMetadata = PasswordStrengthTypeMetadata;
            this.QuestionsRequired = QuestionsRequired;
            this.QuestionsRequiredMetadata = QuestionsRequiredMetadata;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="expirePassword", EmitDefaultValue=false)]
        public string ExpirePassword { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="expirePasswordDays", EmitDefaultValue=false)]
        public string ExpirePasswordDays { get; set; }
        /// <summary>
        /// Gets or Sets ExpirePasswordDaysMetadata
        /// </summary>
        [DataMember(Name="expirePasswordDaysMetadata", EmitDefaultValue=false)]
        public AccountPasswordExpirePasswordDays ExpirePasswordDaysMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="lockoutDurationMinutes", EmitDefaultValue=false)]
        public string LockoutDurationMinutes { get; set; }
        /// <summary>
        /// Gets or Sets LockoutDurationMinutesMetadata
        /// </summary>
        [DataMember(Name="lockoutDurationMinutesMetadata", EmitDefaultValue=false)]
        public AccountPasswordLockoutDurationMinutes LockoutDurationMinutesMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="lockoutDurationType", EmitDefaultValue=false)]
        public string LockoutDurationType { get; set; }
        /// <summary>
        /// Gets or Sets LockoutDurationTypeMetadata
        /// </summary>
        [DataMember(Name="lockoutDurationTypeMetadata", EmitDefaultValue=false)]
        public AccountPasswordLockoutDurationType LockoutDurationTypeMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="minimumPasswordAgeDays", EmitDefaultValue=false)]
        public string MinimumPasswordAgeDays { get; set; }
        /// <summary>
        /// Gets or Sets MinimumPasswordAgeDaysMetadata
        /// </summary>
        [DataMember(Name="minimumPasswordAgeDaysMetadata", EmitDefaultValue=false)]
        public AccountPasswordMinimumPasswordAgeDays MinimumPasswordAgeDaysMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="minimumPasswordLength", EmitDefaultValue=false)]
        public string MinimumPasswordLength { get; set; }
        /// <summary>
        /// Gets or Sets MinimumPasswordLengthMetadata
        /// </summary>
        [DataMember(Name="minimumPasswordLengthMetadata", EmitDefaultValue=false)]
        public AccountMinimumPasswordLength MinimumPasswordLengthMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordIncludeDigit", EmitDefaultValue=false)]
        public string PasswordIncludeDigit { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordIncludeDigitOrSpecialCharacter", EmitDefaultValue=false)]
        public string PasswordIncludeDigitOrSpecialCharacter { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordIncludeLowerCase", EmitDefaultValue=false)]
        public string PasswordIncludeLowerCase { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordIncludeSpecialCharacter", EmitDefaultValue=false)]
        public string PasswordIncludeSpecialCharacter { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordIncludeUpperCase", EmitDefaultValue=false)]
        public string PasswordIncludeUpperCase { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordStrengthType", EmitDefaultValue=false)]
        public string PasswordStrengthType { get; set; }
        /// <summary>
        /// Gets or Sets PasswordStrengthTypeMetadata
        /// </summary>
        [DataMember(Name="passwordStrengthTypeMetadata", EmitDefaultValue=false)]
        public AccountPasswordStrengthType PasswordStrengthTypeMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="questionsRequired", EmitDefaultValue=false)]
        public string QuestionsRequired { get; set; }
        /// <summary>
        /// Gets or Sets QuestionsRequiredMetadata
        /// </summary>
        [DataMember(Name="questionsRequiredMetadata", EmitDefaultValue=false)]
        public AccountPasswordQuestionsRequired QuestionsRequiredMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountPasswordRules {\n");
            sb.Append("  ExpirePassword: ").Append(ExpirePassword).Append("\n");
            sb.Append("  ExpirePasswordDays: ").Append(ExpirePasswordDays).Append("\n");
            sb.Append("  ExpirePasswordDaysMetadata: ").Append(ExpirePasswordDaysMetadata).Append("\n");
            sb.Append("  LockoutDurationMinutes: ").Append(LockoutDurationMinutes).Append("\n");
            sb.Append("  LockoutDurationMinutesMetadata: ").Append(LockoutDurationMinutesMetadata).Append("\n");
            sb.Append("  LockoutDurationType: ").Append(LockoutDurationType).Append("\n");
            sb.Append("  LockoutDurationTypeMetadata: ").Append(LockoutDurationTypeMetadata).Append("\n");
            sb.Append("  MinimumPasswordAgeDays: ").Append(MinimumPasswordAgeDays).Append("\n");
            sb.Append("  MinimumPasswordAgeDaysMetadata: ").Append(MinimumPasswordAgeDaysMetadata).Append("\n");
            sb.Append("  MinimumPasswordLength: ").Append(MinimumPasswordLength).Append("\n");
            sb.Append("  MinimumPasswordLengthMetadata: ").Append(MinimumPasswordLengthMetadata).Append("\n");
            sb.Append("  PasswordIncludeDigit: ").Append(PasswordIncludeDigit).Append("\n");
            sb.Append("  PasswordIncludeDigitOrSpecialCharacter: ").Append(PasswordIncludeDigitOrSpecialCharacter).Append("\n");
            sb.Append("  PasswordIncludeLowerCase: ").Append(PasswordIncludeLowerCase).Append("\n");
            sb.Append("  PasswordIncludeSpecialCharacter: ").Append(PasswordIncludeSpecialCharacter).Append("\n");
            sb.Append("  PasswordIncludeUpperCase: ").Append(PasswordIncludeUpperCase).Append("\n");
            sb.Append("  PasswordStrengthType: ").Append(PasswordStrengthType).Append("\n");
            sb.Append("  PasswordStrengthTypeMetadata: ").Append(PasswordStrengthTypeMetadata).Append("\n");
            sb.Append("  QuestionsRequired: ").Append(QuestionsRequired).Append("\n");
            sb.Append("  QuestionsRequiredMetadata: ").Append(QuestionsRequiredMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountPasswordRules);
        }

        /// <summary>
        /// Returns true if AccountPasswordRules instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountPasswordRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPasswordRules other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpirePassword == other.ExpirePassword ||
                    this.ExpirePassword != null &&
                    this.ExpirePassword.Equals(other.ExpirePassword)
                ) && 
                (
                    this.ExpirePasswordDays == other.ExpirePasswordDays ||
                    this.ExpirePasswordDays != null &&
                    this.ExpirePasswordDays.Equals(other.ExpirePasswordDays)
                ) && 
                (
                    this.ExpirePasswordDaysMetadata == other.ExpirePasswordDaysMetadata ||
                    this.ExpirePasswordDaysMetadata != null &&
                    this.ExpirePasswordDaysMetadata.Equals(other.ExpirePasswordDaysMetadata)
                ) && 
                (
                    this.LockoutDurationMinutes == other.LockoutDurationMinutes ||
                    this.LockoutDurationMinutes != null &&
                    this.LockoutDurationMinutes.Equals(other.LockoutDurationMinutes)
                ) && 
                (
                    this.LockoutDurationMinutesMetadata == other.LockoutDurationMinutesMetadata ||
                    this.LockoutDurationMinutesMetadata != null &&
                    this.LockoutDurationMinutesMetadata.Equals(other.LockoutDurationMinutesMetadata)
                ) && 
                (
                    this.LockoutDurationType == other.LockoutDurationType ||
                    this.LockoutDurationType != null &&
                    this.LockoutDurationType.Equals(other.LockoutDurationType)
                ) && 
                (
                    this.LockoutDurationTypeMetadata == other.LockoutDurationTypeMetadata ||
                    this.LockoutDurationTypeMetadata != null &&
                    this.LockoutDurationTypeMetadata.Equals(other.LockoutDurationTypeMetadata)
                ) && 
                (
                    this.MinimumPasswordAgeDays == other.MinimumPasswordAgeDays ||
                    this.MinimumPasswordAgeDays != null &&
                    this.MinimumPasswordAgeDays.Equals(other.MinimumPasswordAgeDays)
                ) && 
                (
                    this.MinimumPasswordAgeDaysMetadata == other.MinimumPasswordAgeDaysMetadata ||
                    this.MinimumPasswordAgeDaysMetadata != null &&
                    this.MinimumPasswordAgeDaysMetadata.Equals(other.MinimumPasswordAgeDaysMetadata)
                ) && 
                (
                    this.MinimumPasswordLength == other.MinimumPasswordLength ||
                    this.MinimumPasswordLength != null &&
                    this.MinimumPasswordLength.Equals(other.MinimumPasswordLength)
                ) && 
                (
                    this.MinimumPasswordLengthMetadata == other.MinimumPasswordLengthMetadata ||
                    this.MinimumPasswordLengthMetadata != null &&
                    this.MinimumPasswordLengthMetadata.Equals(other.MinimumPasswordLengthMetadata)
                ) && 
                (
                    this.PasswordIncludeDigit == other.PasswordIncludeDigit ||
                    this.PasswordIncludeDigit != null &&
                    this.PasswordIncludeDigit.Equals(other.PasswordIncludeDigit)
                ) && 
                (
                    this.PasswordIncludeDigitOrSpecialCharacter == other.PasswordIncludeDigitOrSpecialCharacter ||
                    this.PasswordIncludeDigitOrSpecialCharacter != null &&
                    this.PasswordIncludeDigitOrSpecialCharacter.Equals(other.PasswordIncludeDigitOrSpecialCharacter)
                ) && 
                (
                    this.PasswordIncludeLowerCase == other.PasswordIncludeLowerCase ||
                    this.PasswordIncludeLowerCase != null &&
                    this.PasswordIncludeLowerCase.Equals(other.PasswordIncludeLowerCase)
                ) && 
                (
                    this.PasswordIncludeSpecialCharacter == other.PasswordIncludeSpecialCharacter ||
                    this.PasswordIncludeSpecialCharacter != null &&
                    this.PasswordIncludeSpecialCharacter.Equals(other.PasswordIncludeSpecialCharacter)
                ) && 
                (
                    this.PasswordIncludeUpperCase == other.PasswordIncludeUpperCase ||
                    this.PasswordIncludeUpperCase != null &&
                    this.PasswordIncludeUpperCase.Equals(other.PasswordIncludeUpperCase)
                ) && 
                (
                    this.PasswordStrengthType == other.PasswordStrengthType ||
                    this.PasswordStrengthType != null &&
                    this.PasswordStrengthType.Equals(other.PasswordStrengthType)
                ) && 
                (
                    this.PasswordStrengthTypeMetadata == other.PasswordStrengthTypeMetadata ||
                    this.PasswordStrengthTypeMetadata != null &&
                    this.PasswordStrengthTypeMetadata.Equals(other.PasswordStrengthTypeMetadata)
                ) && 
                (
                    this.QuestionsRequired == other.QuestionsRequired ||
                    this.QuestionsRequired != null &&
                    this.QuestionsRequired.Equals(other.QuestionsRequired)
                ) && 
                (
                    this.QuestionsRequiredMetadata == other.QuestionsRequiredMetadata ||
                    this.QuestionsRequiredMetadata != null &&
                    this.QuestionsRequiredMetadata.Equals(other.QuestionsRequiredMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpirePassword != null)
                    hash = hash * 59 + this.ExpirePassword.GetHashCode();
                if (this.ExpirePasswordDays != null)
                    hash = hash * 59 + this.ExpirePasswordDays.GetHashCode();
                if (this.ExpirePasswordDaysMetadata != null)
                    hash = hash * 59 + this.ExpirePasswordDaysMetadata.GetHashCode();
                if (this.LockoutDurationMinutes != null)
                    hash = hash * 59 + this.LockoutDurationMinutes.GetHashCode();
                if (this.LockoutDurationMinutesMetadata != null)
                    hash = hash * 59 + this.LockoutDurationMinutesMetadata.GetHashCode();
                if (this.LockoutDurationType != null)
                    hash = hash * 59 + this.LockoutDurationType.GetHashCode();
                if (this.LockoutDurationTypeMetadata != null)
                    hash = hash * 59 + this.LockoutDurationTypeMetadata.GetHashCode();
                if (this.MinimumPasswordAgeDays != null)
                    hash = hash * 59 + this.MinimumPasswordAgeDays.GetHashCode();
                if (this.MinimumPasswordAgeDaysMetadata != null)
                    hash = hash * 59 + this.MinimumPasswordAgeDaysMetadata.GetHashCode();
                if (this.MinimumPasswordLength != null)
                    hash = hash * 59 + this.MinimumPasswordLength.GetHashCode();
                if (this.MinimumPasswordLengthMetadata != null)
                    hash = hash * 59 + this.MinimumPasswordLengthMetadata.GetHashCode();
                if (this.PasswordIncludeDigit != null)
                    hash = hash * 59 + this.PasswordIncludeDigit.GetHashCode();
                if (this.PasswordIncludeDigitOrSpecialCharacter != null)
                    hash = hash * 59 + this.PasswordIncludeDigitOrSpecialCharacter.GetHashCode();
                if (this.PasswordIncludeLowerCase != null)
                    hash = hash * 59 + this.PasswordIncludeLowerCase.GetHashCode();
                if (this.PasswordIncludeSpecialCharacter != null)
                    hash = hash * 59 + this.PasswordIncludeSpecialCharacter.GetHashCode();
                if (this.PasswordIncludeUpperCase != null)
                    hash = hash * 59 + this.PasswordIncludeUpperCase.GetHashCode();
                if (this.PasswordStrengthType != null)
                    hash = hash * 59 + this.PasswordStrengthType.GetHashCode();
                if (this.PasswordStrengthTypeMetadata != null)
                    hash = hash * 59 + this.PasswordStrengthTypeMetadata.GetHashCode();
                if (this.QuestionsRequired != null)
                    hash = hash * 59 + this.QuestionsRequired.GetHashCode();
                if (this.QuestionsRequiredMetadata != null)
                    hash = hash * 59 + this.QuestionsRequiredMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
