/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Contains information about a billing plan.
    /// </summary>
    [DataContract]
    public partial class BillingPlan :  IEquatable<BillingPlan>, IValidatableObject
    {
        public BillingPlan()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlan" /> class.
        /// </summary>
        /// <param name="AppStoreProducts">Reserved: TBD.</param>
        /// <param name="CurrencyPlanPrices">Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, and seatFee that are configured for this plan feature set..</param>
        /// <param name="EnableSupport">When set to **true**, then customer support is provided as part of the account plan..</param>
        /// <param name="IncludedSeats">The number of seats (users) included..</param>
        /// <param name="OtherDiscountPercent">.</param>
        /// <param name="PaymentCycle"> The payment cycle associated with the plan. The possible values are: Monthly or Annually. .</param>
        /// <param name="PaymentMethod">.</param>
        /// <param name="PerSeatPrice">The per seat price for the plan..</param>
        /// <param name="PlanClassification">Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free..</param>
        /// <param name="PlanFeatureSets">.</param>
        /// <param name="PlanId">.</param>
        /// <param name="PlanName">The name of the Billing Plan..</param>
        /// <param name="SeatDiscounts">.</param>
        /// <param name="SupportIncidentFee">The support incident fee charged for each support incident..</param>
        /// <param name="SupportPlanFee">The support plan fee charged for this plan..</param>
        public BillingPlan(List<AppStoreProduct> AppStoreProducts = default(List<AppStoreProduct>), List<CurrencyPlanPrice> CurrencyPlanPrices = default(List<CurrencyPlanPrice>), string EnableSupport = default(string), string IncludedSeats = default(string), string OtherDiscountPercent = default(string), string PaymentCycle = default(string), string PaymentMethod = default(string), string PerSeatPrice = default(string), string PlanClassification = default(string), List<FeatureSet> PlanFeatureSets = default(List<FeatureSet>), string PlanId = default(string), string PlanName = default(string), List<SeatDiscount> SeatDiscounts = default(List<SeatDiscount>), string SupportIncidentFee = default(string), string SupportPlanFee = default(string))
        {
            this.AppStoreProducts = AppStoreProducts;
            this.CurrencyPlanPrices = CurrencyPlanPrices;
            this.EnableSupport = EnableSupport;
            this.IncludedSeats = IncludedSeats;
            this.OtherDiscountPercent = OtherDiscountPercent;
            this.PaymentCycle = PaymentCycle;
            this.PaymentMethod = PaymentMethod;
            this.PerSeatPrice = PerSeatPrice;
            this.PlanClassification = PlanClassification;
            this.PlanFeatureSets = PlanFeatureSets;
            this.PlanId = PlanId;
            this.PlanName = PlanName;
            this.SeatDiscounts = SeatDiscounts;
            this.SupportIncidentFee = SupportIncidentFee;
            this.SupportPlanFee = SupportPlanFee;
        }
        
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="appStoreProducts", EmitDefaultValue=false)]
        public List<AppStoreProduct> AppStoreProducts { get; set; }
        /// <summary>
        /// Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, and seatFee that are configured for this plan feature set.
        /// </summary>
        /// <value>Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, and seatFee that are configured for this plan feature set.</value>
        [DataMember(Name="currencyPlanPrices", EmitDefaultValue=false)]
        public List<CurrencyPlanPrice> CurrencyPlanPrices { get; set; }
        /// <summary>
        /// When set to **true**, then customer support is provided as part of the account plan.
        /// </summary>
        /// <value>When set to **true**, then customer support is provided as part of the account plan.</value>
        [DataMember(Name="enableSupport", EmitDefaultValue=false)]
        public string EnableSupport { get; set; }
        /// <summary>
        /// The number of seats (users) included.
        /// </summary>
        /// <value>The number of seats (users) included.</value>
        [DataMember(Name="includedSeats", EmitDefaultValue=false)]
        public string IncludedSeats { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="otherDiscountPercent", EmitDefaultValue=false)]
        public string OtherDiscountPercent { get; set; }
        /// <summary>
        ///  The payment cycle associated with the plan. The possible values are: Monthly or Annually. 
        /// </summary>
        /// <value> The payment cycle associated with the plan. The possible values are: Monthly or Annually. </value>
        [DataMember(Name="paymentCycle", EmitDefaultValue=false)]
        public string PaymentCycle { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }
        /// <summary>
        /// The per seat price for the plan.
        /// </summary>
        /// <value>The per seat price for the plan.</value>
        [DataMember(Name="perSeatPrice", EmitDefaultValue=false)]
        public string PerSeatPrice { get; set; }
        /// <summary>
        /// Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.
        /// </summary>
        /// <value>Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.</value>
        [DataMember(Name="planClassification", EmitDefaultValue=false)]
        public string PlanClassification { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="planFeatureSets", EmitDefaultValue=false)]
        public List<FeatureSet> PlanFeatureSets { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public string PlanId { get; set; }
        /// <summary>
        /// The name of the Billing Plan.
        /// </summary>
        /// <value>The name of the Billing Plan.</value>
        [DataMember(Name="planName", EmitDefaultValue=false)]
        public string PlanName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="seatDiscounts", EmitDefaultValue=false)]
        public List<SeatDiscount> SeatDiscounts { get; set; }
        /// <summary>
        /// The support incident fee charged for each support incident.
        /// </summary>
        /// <value>The support incident fee charged for each support incident.</value>
        [DataMember(Name="supportIncidentFee", EmitDefaultValue=false)]
        public string SupportIncidentFee { get; set; }
        /// <summary>
        /// The support plan fee charged for this plan.
        /// </summary>
        /// <value>The support plan fee charged for this plan.</value>
        [DataMember(Name="supportPlanFee", EmitDefaultValue=false)]
        public string SupportPlanFee { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPlan {\n");
            sb.Append("  AppStoreProducts: ").Append(AppStoreProducts).Append("\n");
            sb.Append("  CurrencyPlanPrices: ").Append(CurrencyPlanPrices).Append("\n");
            sb.Append("  EnableSupport: ").Append(EnableSupport).Append("\n");
            sb.Append("  IncludedSeats: ").Append(IncludedSeats).Append("\n");
            sb.Append("  OtherDiscountPercent: ").Append(OtherDiscountPercent).Append("\n");
            sb.Append("  PaymentCycle: ").Append(PaymentCycle).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PerSeatPrice: ").Append(PerSeatPrice).Append("\n");
            sb.Append("  PlanClassification: ").Append(PlanClassification).Append("\n");
            sb.Append("  PlanFeatureSets: ").Append(PlanFeatureSets).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  SeatDiscounts: ").Append(SeatDiscounts).Append("\n");
            sb.Append("  SupportIncidentFee: ").Append(SupportIncidentFee).Append("\n");
            sb.Append("  SupportPlanFee: ").Append(SupportPlanFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingPlan);
        }

        /// <summary>
        /// Returns true if BillingPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPlan other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AppStoreProducts == other.AppStoreProducts ||
                    this.AppStoreProducts != null &&
                    this.AppStoreProducts.SequenceEqual(other.AppStoreProducts)
                ) && 
                (
                    this.CurrencyPlanPrices == other.CurrencyPlanPrices ||
                    this.CurrencyPlanPrices != null &&
                    this.CurrencyPlanPrices.SequenceEqual(other.CurrencyPlanPrices)
                ) && 
                (
                    this.EnableSupport == other.EnableSupport ||
                    this.EnableSupport != null &&
                    this.EnableSupport.Equals(other.EnableSupport)
                ) && 
                (
                    this.IncludedSeats == other.IncludedSeats ||
                    this.IncludedSeats != null &&
                    this.IncludedSeats.Equals(other.IncludedSeats)
                ) && 
                (
                    this.OtherDiscountPercent == other.OtherDiscountPercent ||
                    this.OtherDiscountPercent != null &&
                    this.OtherDiscountPercent.Equals(other.OtherDiscountPercent)
                ) && 
                (
                    this.PaymentCycle == other.PaymentCycle ||
                    this.PaymentCycle != null &&
                    this.PaymentCycle.Equals(other.PaymentCycle)
                ) && 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.PerSeatPrice == other.PerSeatPrice ||
                    this.PerSeatPrice != null &&
                    this.PerSeatPrice.Equals(other.PerSeatPrice)
                ) && 
                (
                    this.PlanClassification == other.PlanClassification ||
                    this.PlanClassification != null &&
                    this.PlanClassification.Equals(other.PlanClassification)
                ) && 
                (
                    this.PlanFeatureSets == other.PlanFeatureSets ||
                    this.PlanFeatureSets != null &&
                    this.PlanFeatureSets.SequenceEqual(other.PlanFeatureSets)
                ) && 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.PlanName == other.PlanName ||
                    this.PlanName != null &&
                    this.PlanName.Equals(other.PlanName)
                ) && 
                (
                    this.SeatDiscounts == other.SeatDiscounts ||
                    this.SeatDiscounts != null &&
                    this.SeatDiscounts.SequenceEqual(other.SeatDiscounts)
                ) && 
                (
                    this.SupportIncidentFee == other.SupportIncidentFee ||
                    this.SupportIncidentFee != null &&
                    this.SupportIncidentFee.Equals(other.SupportIncidentFee)
                ) && 
                (
                    this.SupportPlanFee == other.SupportPlanFee ||
                    this.SupportPlanFee != null &&
                    this.SupportPlanFee.Equals(other.SupportPlanFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AppStoreProducts != null)
                    hash = hash * 59 + this.AppStoreProducts.GetHashCode();
                if (this.CurrencyPlanPrices != null)
                    hash = hash * 59 + this.CurrencyPlanPrices.GetHashCode();
                if (this.EnableSupport != null)
                    hash = hash * 59 + this.EnableSupport.GetHashCode();
                if (this.IncludedSeats != null)
                    hash = hash * 59 + this.IncludedSeats.GetHashCode();
                if (this.OtherDiscountPercent != null)
                    hash = hash * 59 + this.OtherDiscountPercent.GetHashCode();
                if (this.PaymentCycle != null)
                    hash = hash * 59 + this.PaymentCycle.GetHashCode();
                if (this.PaymentMethod != null)
                    hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.PerSeatPrice != null)
                    hash = hash * 59 + this.PerSeatPrice.GetHashCode();
                if (this.PlanClassification != null)
                    hash = hash * 59 + this.PlanClassification.GetHashCode();
                if (this.PlanFeatureSets != null)
                    hash = hash * 59 + this.PlanFeatureSets.GetHashCode();
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.PlanName != null)
                    hash = hash * 59 + this.PlanName.GetHashCode();
                if (this.SeatDiscounts != null)
                    hash = hash * 59 + this.SeatDiscounts.GetHashCode();
                if (this.SupportIncidentFee != null)
                    hash = hash * 59 + this.SupportIncidentFee.GetHashCode();
                if (this.SupportPlanFee != null)
                    hash = hash * 59 + this.SupportPlanFee.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
