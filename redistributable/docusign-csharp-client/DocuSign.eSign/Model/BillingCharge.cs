/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Contains information about a billing charge.
    /// </summary>
    [DataContract]
    public partial class BillingCharge :  IEquatable<BillingCharge>, IValidatableObject
    {
        public BillingCharge()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingCharge" /> class.
        /// </summary>
        /// <param name="AllowedQuantity">Reserved: TBD.</param>
        /// <param name="Blocked">Reserved: TBD.</param>
        /// <param name="ChargeName">Provides information on what services the charge item is for.  The following table provides a description of the different chargeName values available at this time.  | chargeName | Description | | - -- | - -- | | id_check | ID Check Charge | | in_person_signing | In Person Signing charge | | envelopes Included | Sent Envelopes for the account | | age_verify | Age verification check | | ofac | OFAC Check | | id_confirm | ID confirmation check | | student_authentication | STAN PIN authentication check | | wet_sign_fax | Pages for returning signed documents by fax | | attachment_fax | Pages for returning attachments by fax | | phone_authentication | Phone authentication charge | | powerforms | PowerForm envelopes sent | | signer_payments | Payment processing charge | | outbound_fax | Send by fax charge | | bulk_recipient_envelopes | Bulk Recipient Envelopes sent | | sms_authentications | SMS authentication charge | | saml_authentications | SAML authentication charge | | express_signer_certificate | DocuSign Express Certificate charge | | personal_signer_certificate | Personal Signer Certificate charge | | safe_certificate | SAFE BioPharma Signer Certificate charge | | seats | Included active seats charge | | open_trust_certificate | OpenTrust Signer Certificate charge |.</param>
        /// <param name="ChargeType">Reserved: TBD.</param>
        /// <param name="ChargeUnitOfMeasure">Reserved: TBD.</param>
        /// <param name="Discounts">.</param>
        /// <param name="FirstEffectiveDate">.</param>
        /// <param name="IncludedQuantity">.</param>
        /// <param name="IncrementalQuantity">Reserved: TBD.</param>
        /// <param name="LastEffectiveDate">.</param>
        /// <param name="Prices">.</param>
        /// <param name="UnitPrice">Reserved: TBD.</param>
        /// <param name="UsedQuantity">.</param>
        public BillingCharge(string AllowedQuantity = default(string), string Blocked = default(string), string ChargeName = default(string), string ChargeType = default(string), string ChargeUnitOfMeasure = default(string), List<BillingDiscount> Discounts = default(List<BillingDiscount>), string FirstEffectiveDate = default(string), string IncludedQuantity = default(string), string IncrementalQuantity = default(string), string LastEffectiveDate = default(string), List<BillingPrice> Prices = default(List<BillingPrice>), string UnitPrice = default(string), string UsedQuantity = default(string))
        {
            this.AllowedQuantity = AllowedQuantity;
            this.Blocked = Blocked;
            this.ChargeName = ChargeName;
            this.ChargeType = ChargeType;
            this.ChargeUnitOfMeasure = ChargeUnitOfMeasure;
            this.Discounts = Discounts;
            this.FirstEffectiveDate = FirstEffectiveDate;
            this.IncludedQuantity = IncludedQuantity;
            this.IncrementalQuantity = IncrementalQuantity;
            this.LastEffectiveDate = LastEffectiveDate;
            this.Prices = Prices;
            this.UnitPrice = UnitPrice;
            this.UsedQuantity = UsedQuantity;
        }
        
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="allowedQuantity", EmitDefaultValue=false)]
        public string AllowedQuantity { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public string Blocked { get; set; }
        /// <summary>
        /// Provides information on what services the charge item is for.  The following table provides a description of the different chargeName values available at this time.  | chargeName | Description | | - -- | - -- | | id_check | ID Check Charge | | in_person_signing | In Person Signing charge | | envelopes Included | Sent Envelopes for the account | | age_verify | Age verification check | | ofac | OFAC Check | | id_confirm | ID confirmation check | | student_authentication | STAN PIN authentication check | | wet_sign_fax | Pages for returning signed documents by fax | | attachment_fax | Pages for returning attachments by fax | | phone_authentication | Phone authentication charge | | powerforms | PowerForm envelopes sent | | signer_payments | Payment processing charge | | outbound_fax | Send by fax charge | | bulk_recipient_envelopes | Bulk Recipient Envelopes sent | | sms_authentications | SMS authentication charge | | saml_authentications | SAML authentication charge | | express_signer_certificate | DocuSign Express Certificate charge | | personal_signer_certificate | Personal Signer Certificate charge | | safe_certificate | SAFE BioPharma Signer Certificate charge | | seats | Included active seats charge | | open_trust_certificate | OpenTrust Signer Certificate charge |
        /// </summary>
        /// <value>Provides information on what services the charge item is for.  The following table provides a description of the different chargeName values available at this time.  | chargeName | Description | | - -- | - -- | | id_check | ID Check Charge | | in_person_signing | In Person Signing charge | | envelopes Included | Sent Envelopes for the account | | age_verify | Age verification check | | ofac | OFAC Check | | id_confirm | ID confirmation check | | student_authentication | STAN PIN authentication check | | wet_sign_fax | Pages for returning signed documents by fax | | attachment_fax | Pages for returning attachments by fax | | phone_authentication | Phone authentication charge | | powerforms | PowerForm envelopes sent | | signer_payments | Payment processing charge | | outbound_fax | Send by fax charge | | bulk_recipient_envelopes | Bulk Recipient Envelopes sent | | sms_authentications | SMS authentication charge | | saml_authentications | SAML authentication charge | | express_signer_certificate | DocuSign Express Certificate charge | | personal_signer_certificate | Personal Signer Certificate charge | | safe_certificate | SAFE BioPharma Signer Certificate charge | | seats | Included active seats charge | | open_trust_certificate | OpenTrust Signer Certificate charge |</value>
        [DataMember(Name="chargeName", EmitDefaultValue=false)]
        public string ChargeName { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="chargeType", EmitDefaultValue=false)]
        public string ChargeType { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="chargeUnitOfMeasure", EmitDefaultValue=false)]
        public string ChargeUnitOfMeasure { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<BillingDiscount> Discounts { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="firstEffectiveDate", EmitDefaultValue=false)]
        public string FirstEffectiveDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="includedQuantity", EmitDefaultValue=false)]
        public string IncludedQuantity { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="incrementalQuantity", EmitDefaultValue=false)]
        public string IncrementalQuantity { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="lastEffectiveDate", EmitDefaultValue=false)]
        public string LastEffectiveDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public List<BillingPrice> Prices { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public string UnitPrice { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="usedQuantity", EmitDefaultValue=false)]
        public string UsedQuantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingCharge {\n");
            sb.Append("  AllowedQuantity: ").Append(AllowedQuantity).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  ChargeName: ").Append(ChargeName).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  ChargeUnitOfMeasure: ").Append(ChargeUnitOfMeasure).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  FirstEffectiveDate: ").Append(FirstEffectiveDate).Append("\n");
            sb.Append("  IncludedQuantity: ").Append(IncludedQuantity).Append("\n");
            sb.Append("  IncrementalQuantity: ").Append(IncrementalQuantity).Append("\n");
            sb.Append("  LastEffectiveDate: ").Append(LastEffectiveDate).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UsedQuantity: ").Append(UsedQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingCharge);
        }

        /// <summary>
        /// Returns true if BillingCharge instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingCharge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingCharge other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowedQuantity == other.AllowedQuantity ||
                    this.AllowedQuantity != null &&
                    this.AllowedQuantity.Equals(other.AllowedQuantity)
                ) && 
                (
                    this.Blocked == other.Blocked ||
                    this.Blocked != null &&
                    this.Blocked.Equals(other.Blocked)
                ) && 
                (
                    this.ChargeName == other.ChargeName ||
                    this.ChargeName != null &&
                    this.ChargeName.Equals(other.ChargeName)
                ) && 
                (
                    this.ChargeType == other.ChargeType ||
                    this.ChargeType != null &&
                    this.ChargeType.Equals(other.ChargeType)
                ) && 
                (
                    this.ChargeUnitOfMeasure == other.ChargeUnitOfMeasure ||
                    this.ChargeUnitOfMeasure != null &&
                    this.ChargeUnitOfMeasure.Equals(other.ChargeUnitOfMeasure)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(other.Discounts)
                ) && 
                (
                    this.FirstEffectiveDate == other.FirstEffectiveDate ||
                    this.FirstEffectiveDate != null &&
                    this.FirstEffectiveDate.Equals(other.FirstEffectiveDate)
                ) && 
                (
                    this.IncludedQuantity == other.IncludedQuantity ||
                    this.IncludedQuantity != null &&
                    this.IncludedQuantity.Equals(other.IncludedQuantity)
                ) && 
                (
                    this.IncrementalQuantity == other.IncrementalQuantity ||
                    this.IncrementalQuantity != null &&
                    this.IncrementalQuantity.Equals(other.IncrementalQuantity)
                ) && 
                (
                    this.LastEffectiveDate == other.LastEffectiveDate ||
                    this.LastEffectiveDate != null &&
                    this.LastEffectiveDate.Equals(other.LastEffectiveDate)
                ) && 
                (
                    this.Prices == other.Prices ||
                    this.Prices != null &&
                    this.Prices.SequenceEqual(other.Prices)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.UsedQuantity == other.UsedQuantity ||
                    this.UsedQuantity != null &&
                    this.UsedQuantity.Equals(other.UsedQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowedQuantity != null)
                    hash = hash * 59 + this.AllowedQuantity.GetHashCode();
                if (this.Blocked != null)
                    hash = hash * 59 + this.Blocked.GetHashCode();
                if (this.ChargeName != null)
                    hash = hash * 59 + this.ChargeName.GetHashCode();
                if (this.ChargeType != null)
                    hash = hash * 59 + this.ChargeType.GetHashCode();
                if (this.ChargeUnitOfMeasure != null)
                    hash = hash * 59 + this.ChargeUnitOfMeasure.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.FirstEffectiveDate != null)
                    hash = hash * 59 + this.FirstEffectiveDate.GetHashCode();
                if (this.IncludedQuantity != null)
                    hash = hash * 59 + this.IncludedQuantity.GetHashCode();
                if (this.IncrementalQuantity != null)
                    hash = hash * 59 + this.IncrementalQuantity.GetHashCode();
                if (this.LastEffectiveDate != null)
                    hash = hash * 59 + this.LastEffectiveDate.GetHashCode();
                if (this.Prices != null)
                    hash = hash * 59 + this.Prices.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.UsedQuantity != null)
                    hash = hash * 59 + this.UsedQuantity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
