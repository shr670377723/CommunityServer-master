/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// EnvelopeEvent
    /// </summary>
    [DataContract]
    public partial class EnvelopeEvent :  IEquatable<EnvelopeEvent>, IValidatableObject
    {
        public EnvelopeEvent()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeEvent" /> class.
        /// </summary>
        /// <param name="EnvelopeEventStatusCode">he envelope status, this can be Sent, Delivered, Completed, Declined, or Voided..</param>
        /// <param name="IncludeDocuments">When set to **true**, the PDF documents are included in the message along with the updated XML. .</param>
        public EnvelopeEvent(string EnvelopeEventStatusCode = default(string), string IncludeDocuments = default(string))
        {
            this.EnvelopeEventStatusCode = EnvelopeEventStatusCode;
            this.IncludeDocuments = IncludeDocuments;
        }
        
        /// <summary>
        /// he envelope status, this can be Sent, Delivered, Completed, Declined, or Voided.
        /// </summary>
        /// <value>he envelope status, this can be Sent, Delivered, Completed, Declined, or Voided.</value>
        [DataMember(Name="envelopeEventStatusCode", EmitDefaultValue=false)]
        public string EnvelopeEventStatusCode { get; set; }
        /// <summary>
        /// When set to **true**, the PDF documents are included in the message along with the updated XML. 
        /// </summary>
        /// <value>When set to **true**, the PDF documents are included in the message along with the updated XML. </value>
        [DataMember(Name="includeDocuments", EmitDefaultValue=false)]
        public string IncludeDocuments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeEvent {\n");
            sb.Append("  EnvelopeEventStatusCode: ").Append(EnvelopeEventStatusCode).Append("\n");
            sb.Append("  IncludeDocuments: ").Append(IncludeDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeEvent);
        }

        /// <summary>
        /// Returns true if EnvelopeEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EnvelopeEventStatusCode == other.EnvelopeEventStatusCode ||
                    this.EnvelopeEventStatusCode != null &&
                    this.EnvelopeEventStatusCode.Equals(other.EnvelopeEventStatusCode)
                ) && 
                (
                    this.IncludeDocuments == other.IncludeDocuments ||
                    this.IncludeDocuments != null &&
                    this.IncludeDocuments.Equals(other.IncludeDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EnvelopeEventStatusCode != null)
                    hash = hash * 59 + this.EnvelopeEventStatusCode.GetHashCode();
                if (this.IncludeDocuments != null)
                    hash = hash * 59 + this.IncludeDocuments.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
