/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// BillingInvoicesSummary
    /// </summary>
    [DataContract]
    public partial class BillingInvoicesSummary :  IEquatable<BillingInvoicesSummary>, IValidatableObject
    {
        public BillingInvoicesSummary()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingInvoicesSummary" /> class.
        /// </summary>
        /// <param name="BillingInvoices">Reserved: TBD.</param>
        /// <param name="PastDueBalance">.</param>
        /// <param name="PaymentAllowed">.</param>
        public BillingInvoicesSummary(List<BillingInvoice> BillingInvoices = default(List<BillingInvoice>), string PastDueBalance = default(string), string PaymentAllowed = default(string))
        {
            this.BillingInvoices = BillingInvoices;
            this.PastDueBalance = PastDueBalance;
            this.PaymentAllowed = PaymentAllowed;
        }
        
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="billingInvoices", EmitDefaultValue=false)]
        public List<BillingInvoice> BillingInvoices { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pastDueBalance", EmitDefaultValue=false)]
        public string PastDueBalance { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentAllowed", EmitDefaultValue=false)]
        public string PaymentAllowed { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingInvoicesSummary {\n");
            sb.Append("  BillingInvoices: ").Append(BillingInvoices).Append("\n");
            sb.Append("  PastDueBalance: ").Append(PastDueBalance).Append("\n");
            sb.Append("  PaymentAllowed: ").Append(PaymentAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingInvoicesSummary);
        }

        /// <summary>
        /// Returns true if BillingInvoicesSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingInvoicesSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingInvoicesSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BillingInvoices == other.BillingInvoices ||
                    this.BillingInvoices != null &&
                    this.BillingInvoices.SequenceEqual(other.BillingInvoices)
                ) && 
                (
                    this.PastDueBalance == other.PastDueBalance ||
                    this.PastDueBalance != null &&
                    this.PastDueBalance.Equals(other.PastDueBalance)
                ) && 
                (
                    this.PaymentAllowed == other.PaymentAllowed ||
                    this.PaymentAllowed != null &&
                    this.PaymentAllowed.Equals(other.PaymentAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BillingInvoices != null)
                    hash = hash * 59 + this.BillingInvoices.GetHashCode();
                if (this.PastDueBalance != null)
                    hash = hash * 59 + this.PastDueBalance.GetHashCode();
                if (this.PaymentAllowed != null)
                    hash = hash * 59 + this.PaymentAllowed.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
