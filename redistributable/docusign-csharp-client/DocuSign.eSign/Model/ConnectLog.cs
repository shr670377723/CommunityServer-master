/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConnectLog
    /// </summary>
    [DataContract]
    public partial class ConnectLog :  IEquatable<ConnectLog>, IValidatableObject
    {
        public ConnectLog()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectLog" /> class.
        /// </summary>
        /// <param name="AccountId">The account ID associated with the envelope..</param>
        /// <param name="ConfigUrl">The web address of the listener or Retrieving Service end point for Connect..</param>
        /// <param name="ConnectDebugLog">A complex element containing information about the Connect configuration, error details, date/time, description and payload.  This is only included in the response if the query additional_info&#x3D;true is used..</param>
        /// <param name="ConnectId">The identifier for the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post..</param>
        /// <param name="Created">The date and time the entry was created..</param>
        /// <param name="Email">The email that sent the envelope..</param>
        /// <param name="EnvelopeId">The envelope ID of the envelope status that failed to post..</param>
        /// <param name="Error">The error that caused the Connect post to fail..</param>
        /// <param name="FailureId">The failure log ID for the failure..</param>
        /// <param name="FailureUri">The URI for the failure..</param>
        /// <param name="LastTry">The date and time the last attempt to post..</param>
        /// <param name="LogId">The Connect log ID for the entry..</param>
        /// <param name="LogUri">The URI for the log item..</param>
        /// <param name="RetryCount">The number of times the Connect post has been retried..</param>
        /// <param name="RetryUri">The UEI to retry to publish the Connect failure..</param>
        /// <param name="Status">The new envelope status for the failed Connect post. The possible values are: Any, Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut, Template, or Processing..</param>
        /// <param name="Subject">The envelope subject..</param>
        /// <param name="UserName">The name of the envelope sender..</param>
        public ConnectLog(string AccountId = default(string), string ConfigUrl = default(string), List<ConnectDebugLog> ConnectDebugLog = default(List<ConnectDebugLog>), string ConnectId = default(string), string Created = default(string), string Email = default(string), string EnvelopeId = default(string), string Error = default(string), string FailureId = default(string), string FailureUri = default(string), string LastTry = default(string), string LogId = default(string), string LogUri = default(string), string RetryCount = default(string), string RetryUri = default(string), string Status = default(string), string Subject = default(string), string UserName = default(string))
        {
            this.AccountId = AccountId;
            this.ConfigUrl = ConfigUrl;
            this.ConnectDebugLog = ConnectDebugLog;
            this.ConnectId = ConnectId;
            this.Created = Created;
            this.Email = Email;
            this.EnvelopeId = EnvelopeId;
            this.Error = Error;
            this.FailureId = FailureId;
            this.FailureUri = FailureUri;
            this.LastTry = LastTry;
            this.LogId = LogId;
            this.LogUri = LogUri;
            this.RetryCount = RetryCount;
            this.RetryUri = RetryUri;
            this.Status = Status;
            this.Subject = Subject;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// The account ID associated with the envelope.
        /// </summary>
        /// <value>The account ID associated with the envelope.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// The web address of the listener or Retrieving Service end point for Connect.
        /// </summary>
        /// <value>The web address of the listener or Retrieving Service end point for Connect.</value>
        [DataMember(Name="configUrl", EmitDefaultValue=false)]
        public string ConfigUrl { get; set; }
        /// <summary>
        /// A complex element containing information about the Connect configuration, error details, date/time, description and payload.  This is only included in the response if the query additional_info&#x3D;true is used.
        /// </summary>
        /// <value>A complex element containing information about the Connect configuration, error details, date/time, description and payload.  This is only included in the response if the query additional_info&#x3D;true is used.</value>
        [DataMember(Name="connectDebugLog", EmitDefaultValue=false)]
        public List<ConnectDebugLog> ConnectDebugLog { get; set; }
        /// <summary>
        /// The identifier for the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.
        /// </summary>
        /// <value>The identifier for the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.</value>
        [DataMember(Name="connectId", EmitDefaultValue=false)]
        public string ConnectId { get; set; }
        /// <summary>
        /// The date and time the entry was created.
        /// </summary>
        /// <value>The date and time the entry was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }
        /// <summary>
        /// The email that sent the envelope.
        /// </summary>
        /// <value>The email that sent the envelope.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The envelope ID of the envelope status that failed to post.
        /// </summary>
        /// <value>The envelope ID of the envelope status that failed to post.</value>
        [DataMember(Name="envelopeId", EmitDefaultValue=false)]
        public string EnvelopeId { get; set; }
        /// <summary>
        /// The error that caused the Connect post to fail.
        /// </summary>
        /// <value>The error that caused the Connect post to fail.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }
        /// <summary>
        /// The failure log ID for the failure.
        /// </summary>
        /// <value>The failure log ID for the failure.</value>
        [DataMember(Name="failureId", EmitDefaultValue=false)]
        public string FailureId { get; set; }
        /// <summary>
        /// The URI for the failure.
        /// </summary>
        /// <value>The URI for the failure.</value>
        [DataMember(Name="failureUri", EmitDefaultValue=false)]
        public string FailureUri { get; set; }
        /// <summary>
        /// The date and time the last attempt to post.
        /// </summary>
        /// <value>The date and time the last attempt to post.</value>
        [DataMember(Name="lastTry", EmitDefaultValue=false)]
        public string LastTry { get; set; }
        /// <summary>
        /// The Connect log ID for the entry.
        /// </summary>
        /// <value>The Connect log ID for the entry.</value>
        [DataMember(Name="logId", EmitDefaultValue=false)]
        public string LogId { get; set; }
        /// <summary>
        /// The URI for the log item.
        /// </summary>
        /// <value>The URI for the log item.</value>
        [DataMember(Name="logUri", EmitDefaultValue=false)]
        public string LogUri { get; set; }
        /// <summary>
        /// The number of times the Connect post has been retried.
        /// </summary>
        /// <value>The number of times the Connect post has been retried.</value>
        [DataMember(Name="retryCount", EmitDefaultValue=false)]
        public string RetryCount { get; set; }
        /// <summary>
        /// The UEI to retry to publish the Connect failure.
        /// </summary>
        /// <value>The UEI to retry to publish the Connect failure.</value>
        [DataMember(Name="retryUri", EmitDefaultValue=false)]
        public string RetryUri { get; set; }
        /// <summary>
        /// The new envelope status for the failed Connect post. The possible values are: Any, Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut, Template, or Processing.
        /// </summary>
        /// <value>The new envelope status for the failed Connect post. The possible values are: Any, Voided, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut, Template, or Processing.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The envelope subject.
        /// </summary>
        /// <value>The envelope subject.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }
        /// <summary>
        /// The name of the envelope sender.
        /// </summary>
        /// <value>The name of the envelope sender.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectLog {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ConfigUrl: ").Append(ConfigUrl).Append("\n");
            sb.Append("  ConnectDebugLog: ").Append(ConnectDebugLog).Append("\n");
            sb.Append("  ConnectId: ").Append(ConnectId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnvelopeId: ").Append(EnvelopeId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  FailureId: ").Append(FailureId).Append("\n");
            sb.Append("  FailureUri: ").Append(FailureUri).Append("\n");
            sb.Append("  LastTry: ").Append(LastTry).Append("\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  LogUri: ").Append(LogUri).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  RetryUri: ").Append(RetryUri).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectLog);
        }

        /// <summary>
        /// Returns true if ConnectLog instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ConfigUrl == other.ConfigUrl ||
                    this.ConfigUrl != null &&
                    this.ConfigUrl.Equals(other.ConfigUrl)
                ) && 
                (
                    this.ConnectDebugLog == other.ConnectDebugLog ||
                    this.ConnectDebugLog != null &&
                    this.ConnectDebugLog.SequenceEqual(other.ConnectDebugLog)
                ) && 
                (
                    this.ConnectId == other.ConnectId ||
                    this.ConnectId != null &&
                    this.ConnectId.Equals(other.ConnectId)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EnvelopeId == other.EnvelopeId ||
                    this.EnvelopeId != null &&
                    this.EnvelopeId.Equals(other.EnvelopeId)
                ) && 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.FailureId == other.FailureId ||
                    this.FailureId != null &&
                    this.FailureId.Equals(other.FailureId)
                ) && 
                (
                    this.FailureUri == other.FailureUri ||
                    this.FailureUri != null &&
                    this.FailureUri.Equals(other.FailureUri)
                ) && 
                (
                    this.LastTry == other.LastTry ||
                    this.LastTry != null &&
                    this.LastTry.Equals(other.LastTry)
                ) && 
                (
                    this.LogId == other.LogId ||
                    this.LogId != null &&
                    this.LogId.Equals(other.LogId)
                ) && 
                (
                    this.LogUri == other.LogUri ||
                    this.LogUri != null &&
                    this.LogUri.Equals(other.LogUri)
                ) && 
                (
                    this.RetryCount == other.RetryCount ||
                    this.RetryCount != null &&
                    this.RetryCount.Equals(other.RetryCount)
                ) && 
                (
                    this.RetryUri == other.RetryUri ||
                    this.RetryUri != null &&
                    this.RetryUri.Equals(other.RetryUri)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ConfigUrl != null)
                    hash = hash * 59 + this.ConfigUrl.GetHashCode();
                if (this.ConnectDebugLog != null)
                    hash = hash * 59 + this.ConnectDebugLog.GetHashCode();
                if (this.ConnectId != null)
                    hash = hash * 59 + this.ConnectId.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EnvelopeId != null)
                    hash = hash * 59 + this.EnvelopeId.GetHashCode();
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.FailureId != null)
                    hash = hash * 59 + this.FailureId.GetHashCode();
                if (this.FailureUri != null)
                    hash = hash * 59 + this.FailureUri.GetHashCode();
                if (this.LastTry != null)
                    hash = hash * 59 + this.LastTry.GetHashCode();
                if (this.LogId != null)
                    hash = hash * 59 + this.LogId.GetHashCode();
                if (this.LogUri != null)
                    hash = hash * 59 + this.LogUri.GetHashCode();
                if (this.RetryCount != null)
                    hash = hash * 59 + this.RetryCount.GetHashCode();
                if (this.RetryUri != null)
                    hash = hash * 59 + this.RetryUri.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
