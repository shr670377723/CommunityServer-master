/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConsumerDisclosure
    /// </summary>
    [DataContract]
    public partial class ConsumerDisclosure :  IEquatable<ConsumerDisclosure>, IValidatableObject
    {
        public ConsumerDisclosure()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerDisclosure" /> class.
        /// </summary>
        /// <param name="AccountEsignId">A GUID identifying the account associated with the consumer disclosure.</param>
        /// <param name="AllowCDWithdraw">Indicates whether the customer can withdraw their acceptance of the consumer disclosure..</param>
        /// <param name="AllowCDWithdrawMetadata">AllowCDWithdrawMetadata.</param>
        /// <param name="ChangeEmail">.</param>
        /// <param name="ChangeEmailOther">.</param>
        /// <param name="CompanyName">The name of the company associated with the consumer disclosure..</param>
        /// <param name="CompanyPhone">The phone number of the company associated with the consumer disclosure..</param>
        /// <param name="CopyCostPerPage">.</param>
        /// <param name="CopyFeeCollectionMethod">Specifies the fee collection method for cases in which the customer requires paper copies of the document.  Maximum Length: 255 characters.</param>
        /// <param name="CopyRequestEmail">.</param>
        /// <param name="Custom">.</param>
        /// <param name="EnableEsign">.</param>
        /// <param name="EsignAgreement">The Electronic Record and Signature Disclosure text. The disclosure text includes the html formatting..</param>
        /// <param name="EsignText">.</param>
        /// <param name="LanguageCode">.</param>
        /// <param name="MustAgreeToEsign">.</param>
        /// <param name="PdfId">.</param>
        /// <param name="UseBrand">.</param>
        /// <param name="UseConsumerDisclosureWithinAccount">.</param>
        /// <param name="UseConsumerDisclosureWithinAccountMetadata">UseConsumerDisclosureWithinAccountMetadata.</param>
        /// <param name="WithdrawAddressLine1">Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. .</param>
        /// <param name="WithdrawAddressLine2">Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. .</param>
        /// <param name="WithdrawByEmail">Indicates whether the customer can withdraw consent by email..</param>
        /// <param name="WithdrawByMail">Indicates whether the customer can withdraw consent by postal mail..</param>
        /// <param name="WithdrawByPhone">Indicates whether the customer can withdraw consent by phone..</param>
        /// <param name="WithdrawCity">Contains the city of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 50 characters. .</param>
        /// <param name="WithdrawConsequences">Indicates the consequences of withdrawing consent..</param>
        /// <param name="WithdrawEmail">Contains the email address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. .</param>
        /// <param name="WithdrawOther">Indicates other information need to withdraw consent.  Maximum length: 255 characters..</param>
        /// <param name="WithdrawPhone">Contains the phone number which a customer can call to register consent withdrawal notification.  Maximum length: 20 characters. .</param>
        /// <param name="WithdrawPostalCode">Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 20 characters. .</param>
        /// <param name="WithdrawState">Contains the state of the postal address to which a customer can send a consent withdrawal notification..</param>
        public ConsumerDisclosure(string AccountEsignId = default(string), string AllowCDWithdraw = default(string), SettingsMetadata AllowCDWithdrawMetadata = default(SettingsMetadata), string ChangeEmail = default(string), string ChangeEmailOther = default(string), string CompanyName = default(string), string CompanyPhone = default(string), string CopyCostPerPage = default(string), string CopyFeeCollectionMethod = default(string), string CopyRequestEmail = default(string), string Custom = default(string), string EnableEsign = default(string), string EsignAgreement = default(string), string EsignText = default(string), string LanguageCode = default(string), string MustAgreeToEsign = default(string), string PdfId = default(string), string UseBrand = default(string), string UseConsumerDisclosureWithinAccount = default(string), SettingsMetadata UseConsumerDisclosureWithinAccountMetadata = default(SettingsMetadata), string WithdrawAddressLine1 = default(string), string WithdrawAddressLine2 = default(string), string WithdrawByEmail = default(string), string WithdrawByMail = default(string), string WithdrawByPhone = default(string), string WithdrawCity = default(string), string WithdrawConsequences = default(string), string WithdrawEmail = default(string), string WithdrawOther = default(string), string WithdrawPhone = default(string), string WithdrawPostalCode = default(string), string WithdrawState = default(string))
        {
            this.AccountEsignId = AccountEsignId;
            this.AllowCDWithdraw = AllowCDWithdraw;
            this.AllowCDWithdrawMetadata = AllowCDWithdrawMetadata;
            this.ChangeEmail = ChangeEmail;
            this.ChangeEmailOther = ChangeEmailOther;
            this.CompanyName = CompanyName;
            this.CompanyPhone = CompanyPhone;
            this.CopyCostPerPage = CopyCostPerPage;
            this.CopyFeeCollectionMethod = CopyFeeCollectionMethod;
            this.CopyRequestEmail = CopyRequestEmail;
            this.Custom = Custom;
            this.EnableEsign = EnableEsign;
            this.EsignAgreement = EsignAgreement;
            this.EsignText = EsignText;
            this.LanguageCode = LanguageCode;
            this.MustAgreeToEsign = MustAgreeToEsign;
            this.PdfId = PdfId;
            this.UseBrand = UseBrand;
            this.UseConsumerDisclosureWithinAccount = UseConsumerDisclosureWithinAccount;
            this.UseConsumerDisclosureWithinAccountMetadata = UseConsumerDisclosureWithinAccountMetadata;
            this.WithdrawAddressLine1 = WithdrawAddressLine1;
            this.WithdrawAddressLine2 = WithdrawAddressLine2;
            this.WithdrawByEmail = WithdrawByEmail;
            this.WithdrawByMail = WithdrawByMail;
            this.WithdrawByPhone = WithdrawByPhone;
            this.WithdrawCity = WithdrawCity;
            this.WithdrawConsequences = WithdrawConsequences;
            this.WithdrawEmail = WithdrawEmail;
            this.WithdrawOther = WithdrawOther;
            this.WithdrawPhone = WithdrawPhone;
            this.WithdrawPostalCode = WithdrawPostalCode;
            this.WithdrawState = WithdrawState;
        }
        
        /// <summary>
        /// A GUID identifying the account associated with the consumer disclosure
        /// </summary>
        /// <value>A GUID identifying the account associated with the consumer disclosure</value>
        [DataMember(Name="accountEsignId", EmitDefaultValue=false)]
        public string AccountEsignId { get; set; }
        /// <summary>
        /// Indicates whether the customer can withdraw their acceptance of the consumer disclosure.
        /// </summary>
        /// <value>Indicates whether the customer can withdraw their acceptance of the consumer disclosure.</value>
        [DataMember(Name="allowCDWithdraw", EmitDefaultValue=false)]
        public string AllowCDWithdraw { get; set; }
        /// <summary>
        /// Gets or Sets AllowCDWithdrawMetadata
        /// </summary>
        [DataMember(Name="allowCDWithdrawMetadata", EmitDefaultValue=false)]
        public SettingsMetadata AllowCDWithdrawMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="changeEmail", EmitDefaultValue=false)]
        public string ChangeEmail { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="changeEmailOther", EmitDefaultValue=false)]
        public string ChangeEmailOther { get; set; }
        /// <summary>
        /// The name of the company associated with the consumer disclosure.
        /// </summary>
        /// <value>The name of the company associated with the consumer disclosure.</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }
        /// <summary>
        /// The phone number of the company associated with the consumer disclosure.
        /// </summary>
        /// <value>The phone number of the company associated with the consumer disclosure.</value>
        [DataMember(Name="companyPhone", EmitDefaultValue=false)]
        public string CompanyPhone { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="copyCostPerPage", EmitDefaultValue=false)]
        public string CopyCostPerPage { get; set; }
        /// <summary>
        /// Specifies the fee collection method for cases in which the customer requires paper copies of the document.  Maximum Length: 255 characters
        /// </summary>
        /// <value>Specifies the fee collection method for cases in which the customer requires paper copies of the document.  Maximum Length: 255 characters</value>
        [DataMember(Name="copyFeeCollectionMethod", EmitDefaultValue=false)]
        public string CopyFeeCollectionMethod { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="copyRequestEmail", EmitDefaultValue=false)]
        public string CopyRequestEmail { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="custom", EmitDefaultValue=false)]
        public string Custom { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="enableEsign", EmitDefaultValue=false)]
        public string EnableEsign { get; set; }
        /// <summary>
        /// The Electronic Record and Signature Disclosure text. The disclosure text includes the html formatting.
        /// </summary>
        /// <value>The Electronic Record and Signature Disclosure text. The disclosure text includes the html formatting.</value>
        [DataMember(Name="esignAgreement", EmitDefaultValue=false)]
        public string EsignAgreement { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="esignText", EmitDefaultValue=false)]
        public string EsignText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="languageCode", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="mustAgreeToEsign", EmitDefaultValue=false)]
        public string MustAgreeToEsign { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pdfId", EmitDefaultValue=false)]
        public string PdfId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="useBrand", EmitDefaultValue=false)]
        public string UseBrand { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="useConsumerDisclosureWithinAccount", EmitDefaultValue=false)]
        public string UseConsumerDisclosureWithinAccount { get; set; }
        /// <summary>
        /// Gets or Sets UseConsumerDisclosureWithinAccountMetadata
        /// </summary>
        [DataMember(Name="useConsumerDisclosureWithinAccountMetadata", EmitDefaultValue=false)]
        public SettingsMetadata UseConsumerDisclosureWithinAccountMetadata { get; set; }
        /// <summary>
        /// Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
        /// </summary>
        /// <value>Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. </value>
        [DataMember(Name="withdrawAddressLine1", EmitDefaultValue=false)]
        public string WithdrawAddressLine1 { get; set; }
        /// <summary>
        /// Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
        /// </summary>
        /// <value>Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. </value>
        [DataMember(Name="withdrawAddressLine2", EmitDefaultValue=false)]
        public string WithdrawAddressLine2 { get; set; }
        /// <summary>
        /// Indicates whether the customer can withdraw consent by email.
        /// </summary>
        /// <value>Indicates whether the customer can withdraw consent by email.</value>
        [DataMember(Name="withdrawByEmail", EmitDefaultValue=false)]
        public string WithdrawByEmail { get; set; }
        /// <summary>
        /// Indicates whether the customer can withdraw consent by postal mail.
        /// </summary>
        /// <value>Indicates whether the customer can withdraw consent by postal mail.</value>
        [DataMember(Name="withdrawByMail", EmitDefaultValue=false)]
        public string WithdrawByMail { get; set; }
        /// <summary>
        /// Indicates whether the customer can withdraw consent by phone.
        /// </summary>
        /// <value>Indicates whether the customer can withdraw consent by phone.</value>
        [DataMember(Name="withdrawByPhone", EmitDefaultValue=false)]
        public string WithdrawByPhone { get; set; }
        /// <summary>
        /// Contains the city of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 50 characters. 
        /// </summary>
        /// <value>Contains the city of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 50 characters. </value>
        [DataMember(Name="withdrawCity", EmitDefaultValue=false)]
        public string WithdrawCity { get; set; }
        /// <summary>
        /// Indicates the consequences of withdrawing consent.
        /// </summary>
        /// <value>Indicates the consequences of withdrawing consent.</value>
        [DataMember(Name="withdrawConsequences", EmitDefaultValue=false)]
        public string WithdrawConsequences { get; set; }
        /// <summary>
        /// Contains the email address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. 
        /// </summary>
        /// <value>Contains the email address to which a customer can send a consent withdrawal notification.  Maximum length: 100 characters. </value>
        [DataMember(Name="withdrawEmail", EmitDefaultValue=false)]
        public string WithdrawEmail { get; set; }
        /// <summary>
        /// Indicates other information need to withdraw consent.  Maximum length: 255 characters.
        /// </summary>
        /// <value>Indicates other information need to withdraw consent.  Maximum length: 255 characters.</value>
        [DataMember(Name="withdrawOther", EmitDefaultValue=false)]
        public string WithdrawOther { get; set; }
        /// <summary>
        /// Contains the phone number which a customer can call to register consent withdrawal notification.  Maximum length: 20 characters. 
        /// </summary>
        /// <value>Contains the phone number which a customer can call to register consent withdrawal notification.  Maximum length: 20 characters. </value>
        [DataMember(Name="withdrawPhone", EmitDefaultValue=false)]
        public string WithdrawPhone { get; set; }
        /// <summary>
        /// Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 20 characters. 
        /// </summary>
        /// <value>Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.  Maximum length: 20 characters. </value>
        [DataMember(Name="withdrawPostalCode", EmitDefaultValue=false)]
        public string WithdrawPostalCode { get; set; }
        /// <summary>
        /// Contains the state of the postal address to which a customer can send a consent withdrawal notification.
        /// </summary>
        /// <value>Contains the state of the postal address to which a customer can send a consent withdrawal notification.</value>
        [DataMember(Name="withdrawState", EmitDefaultValue=false)]
        public string WithdrawState { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumerDisclosure {\n");
            sb.Append("  AccountEsignId: ").Append(AccountEsignId).Append("\n");
            sb.Append("  AllowCDWithdraw: ").Append(AllowCDWithdraw).Append("\n");
            sb.Append("  AllowCDWithdrawMetadata: ").Append(AllowCDWithdrawMetadata).Append("\n");
            sb.Append("  ChangeEmail: ").Append(ChangeEmail).Append("\n");
            sb.Append("  ChangeEmailOther: ").Append(ChangeEmailOther).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyPhone: ").Append(CompanyPhone).Append("\n");
            sb.Append("  CopyCostPerPage: ").Append(CopyCostPerPage).Append("\n");
            sb.Append("  CopyFeeCollectionMethod: ").Append(CopyFeeCollectionMethod).Append("\n");
            sb.Append("  CopyRequestEmail: ").Append(CopyRequestEmail).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  EnableEsign: ").Append(EnableEsign).Append("\n");
            sb.Append("  EsignAgreement: ").Append(EsignAgreement).Append("\n");
            sb.Append("  EsignText: ").Append(EsignText).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  MustAgreeToEsign: ").Append(MustAgreeToEsign).Append("\n");
            sb.Append("  PdfId: ").Append(PdfId).Append("\n");
            sb.Append("  UseBrand: ").Append(UseBrand).Append("\n");
            sb.Append("  UseConsumerDisclosureWithinAccount: ").Append(UseConsumerDisclosureWithinAccount).Append("\n");
            sb.Append("  UseConsumerDisclosureWithinAccountMetadata: ").Append(UseConsumerDisclosureWithinAccountMetadata).Append("\n");
            sb.Append("  WithdrawAddressLine1: ").Append(WithdrawAddressLine1).Append("\n");
            sb.Append("  WithdrawAddressLine2: ").Append(WithdrawAddressLine2).Append("\n");
            sb.Append("  WithdrawByEmail: ").Append(WithdrawByEmail).Append("\n");
            sb.Append("  WithdrawByMail: ").Append(WithdrawByMail).Append("\n");
            sb.Append("  WithdrawByPhone: ").Append(WithdrawByPhone).Append("\n");
            sb.Append("  WithdrawCity: ").Append(WithdrawCity).Append("\n");
            sb.Append("  WithdrawConsequences: ").Append(WithdrawConsequences).Append("\n");
            sb.Append("  WithdrawEmail: ").Append(WithdrawEmail).Append("\n");
            sb.Append("  WithdrawOther: ").Append(WithdrawOther).Append("\n");
            sb.Append("  WithdrawPhone: ").Append(WithdrawPhone).Append("\n");
            sb.Append("  WithdrawPostalCode: ").Append(WithdrawPostalCode).Append("\n");
            sb.Append("  WithdrawState: ").Append(WithdrawState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConsumerDisclosure);
        }

        /// <summary>
        /// Returns true if ConsumerDisclosure instances are equal
        /// </summary>
        /// <param name="other">Instance of ConsumerDisclosure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumerDisclosure other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountEsignId == other.AccountEsignId ||
                    this.AccountEsignId != null &&
                    this.AccountEsignId.Equals(other.AccountEsignId)
                ) && 
                (
                    this.AllowCDWithdraw == other.AllowCDWithdraw ||
                    this.AllowCDWithdraw != null &&
                    this.AllowCDWithdraw.Equals(other.AllowCDWithdraw)
                ) && 
                (
                    this.AllowCDWithdrawMetadata == other.AllowCDWithdrawMetadata ||
                    this.AllowCDWithdrawMetadata != null &&
                    this.AllowCDWithdrawMetadata.Equals(other.AllowCDWithdrawMetadata)
                ) && 
                (
                    this.ChangeEmail == other.ChangeEmail ||
                    this.ChangeEmail != null &&
                    this.ChangeEmail.Equals(other.ChangeEmail)
                ) && 
                (
                    this.ChangeEmailOther == other.ChangeEmailOther ||
                    this.ChangeEmailOther != null &&
                    this.ChangeEmailOther.Equals(other.ChangeEmailOther)
                ) && 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.CompanyPhone == other.CompanyPhone ||
                    this.CompanyPhone != null &&
                    this.CompanyPhone.Equals(other.CompanyPhone)
                ) && 
                (
                    this.CopyCostPerPage == other.CopyCostPerPage ||
                    this.CopyCostPerPage != null &&
                    this.CopyCostPerPage.Equals(other.CopyCostPerPage)
                ) && 
                (
                    this.CopyFeeCollectionMethod == other.CopyFeeCollectionMethod ||
                    this.CopyFeeCollectionMethod != null &&
                    this.CopyFeeCollectionMethod.Equals(other.CopyFeeCollectionMethod)
                ) && 
                (
                    this.CopyRequestEmail == other.CopyRequestEmail ||
                    this.CopyRequestEmail != null &&
                    this.CopyRequestEmail.Equals(other.CopyRequestEmail)
                ) && 
                (
                    this.Custom == other.Custom ||
                    this.Custom != null &&
                    this.Custom.Equals(other.Custom)
                ) && 
                (
                    this.EnableEsign == other.EnableEsign ||
                    this.EnableEsign != null &&
                    this.EnableEsign.Equals(other.EnableEsign)
                ) && 
                (
                    this.EsignAgreement == other.EsignAgreement ||
                    this.EsignAgreement != null &&
                    this.EsignAgreement.Equals(other.EsignAgreement)
                ) && 
                (
                    this.EsignText == other.EsignText ||
                    this.EsignText != null &&
                    this.EsignText.Equals(other.EsignText)
                ) && 
                (
                    this.LanguageCode == other.LanguageCode ||
                    this.LanguageCode != null &&
                    this.LanguageCode.Equals(other.LanguageCode)
                ) && 
                (
                    this.MustAgreeToEsign == other.MustAgreeToEsign ||
                    this.MustAgreeToEsign != null &&
                    this.MustAgreeToEsign.Equals(other.MustAgreeToEsign)
                ) && 
                (
                    this.PdfId == other.PdfId ||
                    this.PdfId != null &&
                    this.PdfId.Equals(other.PdfId)
                ) && 
                (
                    this.UseBrand == other.UseBrand ||
                    this.UseBrand != null &&
                    this.UseBrand.Equals(other.UseBrand)
                ) && 
                (
                    this.UseConsumerDisclosureWithinAccount == other.UseConsumerDisclosureWithinAccount ||
                    this.UseConsumerDisclosureWithinAccount != null &&
                    this.UseConsumerDisclosureWithinAccount.Equals(other.UseConsumerDisclosureWithinAccount)
                ) && 
                (
                    this.UseConsumerDisclosureWithinAccountMetadata == other.UseConsumerDisclosureWithinAccountMetadata ||
                    this.UseConsumerDisclosureWithinAccountMetadata != null &&
                    this.UseConsumerDisclosureWithinAccountMetadata.Equals(other.UseConsumerDisclosureWithinAccountMetadata)
                ) && 
                (
                    this.WithdrawAddressLine1 == other.WithdrawAddressLine1 ||
                    this.WithdrawAddressLine1 != null &&
                    this.WithdrawAddressLine1.Equals(other.WithdrawAddressLine1)
                ) && 
                (
                    this.WithdrawAddressLine2 == other.WithdrawAddressLine2 ||
                    this.WithdrawAddressLine2 != null &&
                    this.WithdrawAddressLine2.Equals(other.WithdrawAddressLine2)
                ) && 
                (
                    this.WithdrawByEmail == other.WithdrawByEmail ||
                    this.WithdrawByEmail != null &&
                    this.WithdrawByEmail.Equals(other.WithdrawByEmail)
                ) && 
                (
                    this.WithdrawByMail == other.WithdrawByMail ||
                    this.WithdrawByMail != null &&
                    this.WithdrawByMail.Equals(other.WithdrawByMail)
                ) && 
                (
                    this.WithdrawByPhone == other.WithdrawByPhone ||
                    this.WithdrawByPhone != null &&
                    this.WithdrawByPhone.Equals(other.WithdrawByPhone)
                ) && 
                (
                    this.WithdrawCity == other.WithdrawCity ||
                    this.WithdrawCity != null &&
                    this.WithdrawCity.Equals(other.WithdrawCity)
                ) && 
                (
                    this.WithdrawConsequences == other.WithdrawConsequences ||
                    this.WithdrawConsequences != null &&
                    this.WithdrawConsequences.Equals(other.WithdrawConsequences)
                ) && 
                (
                    this.WithdrawEmail == other.WithdrawEmail ||
                    this.WithdrawEmail != null &&
                    this.WithdrawEmail.Equals(other.WithdrawEmail)
                ) && 
                (
                    this.WithdrawOther == other.WithdrawOther ||
                    this.WithdrawOther != null &&
                    this.WithdrawOther.Equals(other.WithdrawOther)
                ) && 
                (
                    this.WithdrawPhone == other.WithdrawPhone ||
                    this.WithdrawPhone != null &&
                    this.WithdrawPhone.Equals(other.WithdrawPhone)
                ) && 
                (
                    this.WithdrawPostalCode == other.WithdrawPostalCode ||
                    this.WithdrawPostalCode != null &&
                    this.WithdrawPostalCode.Equals(other.WithdrawPostalCode)
                ) && 
                (
                    this.WithdrawState == other.WithdrawState ||
                    this.WithdrawState != null &&
                    this.WithdrawState.Equals(other.WithdrawState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountEsignId != null)
                    hash = hash * 59 + this.AccountEsignId.GetHashCode();
                if (this.AllowCDWithdraw != null)
                    hash = hash * 59 + this.AllowCDWithdraw.GetHashCode();
                if (this.AllowCDWithdrawMetadata != null)
                    hash = hash * 59 + this.AllowCDWithdrawMetadata.GetHashCode();
                if (this.ChangeEmail != null)
                    hash = hash * 59 + this.ChangeEmail.GetHashCode();
                if (this.ChangeEmailOther != null)
                    hash = hash * 59 + this.ChangeEmailOther.GetHashCode();
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyPhone != null)
                    hash = hash * 59 + this.CompanyPhone.GetHashCode();
                if (this.CopyCostPerPage != null)
                    hash = hash * 59 + this.CopyCostPerPage.GetHashCode();
                if (this.CopyFeeCollectionMethod != null)
                    hash = hash * 59 + this.CopyFeeCollectionMethod.GetHashCode();
                if (this.CopyRequestEmail != null)
                    hash = hash * 59 + this.CopyRequestEmail.GetHashCode();
                if (this.Custom != null)
                    hash = hash * 59 + this.Custom.GetHashCode();
                if (this.EnableEsign != null)
                    hash = hash * 59 + this.EnableEsign.GetHashCode();
                if (this.EsignAgreement != null)
                    hash = hash * 59 + this.EsignAgreement.GetHashCode();
                if (this.EsignText != null)
                    hash = hash * 59 + this.EsignText.GetHashCode();
                if (this.LanguageCode != null)
                    hash = hash * 59 + this.LanguageCode.GetHashCode();
                if (this.MustAgreeToEsign != null)
                    hash = hash * 59 + this.MustAgreeToEsign.GetHashCode();
                if (this.PdfId != null)
                    hash = hash * 59 + this.PdfId.GetHashCode();
                if (this.UseBrand != null)
                    hash = hash * 59 + this.UseBrand.GetHashCode();
                if (this.UseConsumerDisclosureWithinAccount != null)
                    hash = hash * 59 + this.UseConsumerDisclosureWithinAccount.GetHashCode();
                if (this.UseConsumerDisclosureWithinAccountMetadata != null)
                    hash = hash * 59 + this.UseConsumerDisclosureWithinAccountMetadata.GetHashCode();
                if (this.WithdrawAddressLine1 != null)
                    hash = hash * 59 + this.WithdrawAddressLine1.GetHashCode();
                if (this.WithdrawAddressLine2 != null)
                    hash = hash * 59 + this.WithdrawAddressLine2.GetHashCode();
                if (this.WithdrawByEmail != null)
                    hash = hash * 59 + this.WithdrawByEmail.GetHashCode();
                if (this.WithdrawByMail != null)
                    hash = hash * 59 + this.WithdrawByMail.GetHashCode();
                if (this.WithdrawByPhone != null)
                    hash = hash * 59 + this.WithdrawByPhone.GetHashCode();
                if (this.WithdrawCity != null)
                    hash = hash * 59 + this.WithdrawCity.GetHashCode();
                if (this.WithdrawConsequences != null)
                    hash = hash * 59 + this.WithdrawConsequences.GetHashCode();
                if (this.WithdrawEmail != null)
                    hash = hash * 59 + this.WithdrawEmail.GetHashCode();
                if (this.WithdrawOther != null)
                    hash = hash * 59 + this.WithdrawOther.GetHashCode();
                if (this.WithdrawPhone != null)
                    hash = hash * 59 + this.WithdrawPhone.GetHashCode();
                if (this.WithdrawPostalCode != null)
                    hash = hash * 59 + this.WithdrawPostalCode.GetHashCode();
                if (this.WithdrawState != null)
                    hash = hash * 59 + this.WithdrawState.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
