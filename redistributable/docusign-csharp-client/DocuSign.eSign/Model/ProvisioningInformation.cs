/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ProvisioningInformation
    /// </summary>
    [DataContract]
    public partial class ProvisioningInformation :  IEquatable<ProvisioningInformation>, IValidatableObject
    {
        public ProvisioningInformation()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningInformation" /> class.
        /// </summary>
        /// <param name="DefaultConnectionId">.</param>
        /// <param name="DefaultPlanId">.</param>
        /// <param name="DistributorCode">The code that identifies the billing plan groups and plans for the new account..</param>
        /// <param name="DistributorPassword">The password for the distributorCode..</param>
        /// <param name="PasswordRuleText">.</param>
        /// <param name="PlanPromotionText">.</param>
        /// <param name="PurchaseOrderOrPromAllowed">.</param>
        public ProvisioningInformation(string DefaultConnectionId = default(string), string DefaultPlanId = default(string), string DistributorCode = default(string), string DistributorPassword = default(string), string PasswordRuleText = default(string), string PlanPromotionText = default(string), string PurchaseOrderOrPromAllowed = default(string))
        {
            this.DefaultConnectionId = DefaultConnectionId;
            this.DefaultPlanId = DefaultPlanId;
            this.DistributorCode = DistributorCode;
            this.DistributorPassword = DistributorPassword;
            this.PasswordRuleText = PasswordRuleText;
            this.PlanPromotionText = PlanPromotionText;
            this.PurchaseOrderOrPromAllowed = PurchaseOrderOrPromAllowed;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="defaultConnectionId", EmitDefaultValue=false)]
        public string DefaultConnectionId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="defaultPlanId", EmitDefaultValue=false)]
        public string DefaultPlanId { get; set; }
        /// <summary>
        /// The code that identifies the billing plan groups and plans for the new account.
        /// </summary>
        /// <value>The code that identifies the billing plan groups and plans for the new account.</value>
        [DataMember(Name="distributorCode", EmitDefaultValue=false)]
        public string DistributorCode { get; set; }
        /// <summary>
        /// The password for the distributorCode.
        /// </summary>
        /// <value>The password for the distributorCode.</value>
        [DataMember(Name="distributorPassword", EmitDefaultValue=false)]
        public string DistributorPassword { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="passwordRuleText", EmitDefaultValue=false)]
        public string PasswordRuleText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="planPromotionText", EmitDefaultValue=false)]
        public string PlanPromotionText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="purchaseOrderOrPromAllowed", EmitDefaultValue=false)]
        public string PurchaseOrderOrPromAllowed { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningInformation {\n");
            sb.Append("  DefaultConnectionId: ").Append(DefaultConnectionId).Append("\n");
            sb.Append("  DefaultPlanId: ").Append(DefaultPlanId).Append("\n");
            sb.Append("  DistributorCode: ").Append(DistributorCode).Append("\n");
            sb.Append("  DistributorPassword: ").Append(DistributorPassword).Append("\n");
            sb.Append("  PasswordRuleText: ").Append(PasswordRuleText).Append("\n");
            sb.Append("  PlanPromotionText: ").Append(PlanPromotionText).Append("\n");
            sb.Append("  PurchaseOrderOrPromAllowed: ").Append(PurchaseOrderOrPromAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProvisioningInformation);
        }

        /// <summary>
        /// Returns true if ProvisioningInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProvisioningInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultConnectionId == other.DefaultConnectionId ||
                    this.DefaultConnectionId != null &&
                    this.DefaultConnectionId.Equals(other.DefaultConnectionId)
                ) && 
                (
                    this.DefaultPlanId == other.DefaultPlanId ||
                    this.DefaultPlanId != null &&
                    this.DefaultPlanId.Equals(other.DefaultPlanId)
                ) && 
                (
                    this.DistributorCode == other.DistributorCode ||
                    this.DistributorCode != null &&
                    this.DistributorCode.Equals(other.DistributorCode)
                ) && 
                (
                    this.DistributorPassword == other.DistributorPassword ||
                    this.DistributorPassword != null &&
                    this.DistributorPassword.Equals(other.DistributorPassword)
                ) && 
                (
                    this.PasswordRuleText == other.PasswordRuleText ||
                    this.PasswordRuleText != null &&
                    this.PasswordRuleText.Equals(other.PasswordRuleText)
                ) && 
                (
                    this.PlanPromotionText == other.PlanPromotionText ||
                    this.PlanPromotionText != null &&
                    this.PlanPromotionText.Equals(other.PlanPromotionText)
                ) && 
                (
                    this.PurchaseOrderOrPromAllowed == other.PurchaseOrderOrPromAllowed ||
                    this.PurchaseOrderOrPromAllowed != null &&
                    this.PurchaseOrderOrPromAllowed.Equals(other.PurchaseOrderOrPromAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultConnectionId != null)
                    hash = hash * 59 + this.DefaultConnectionId.GetHashCode();
                if (this.DefaultPlanId != null)
                    hash = hash * 59 + this.DefaultPlanId.GetHashCode();
                if (this.DistributorCode != null)
                    hash = hash * 59 + this.DistributorCode.GetHashCode();
                if (this.DistributorPassword != null)
                    hash = hash * 59 + this.DistributorPassword.GetHashCode();
                if (this.PasswordRuleText != null)
                    hash = hash * 59 + this.PasswordRuleText.GetHashCode();
                if (this.PlanPromotionText != null)
                    hash = hash * 59 + this.PlanPromotionText.GetHashCode();
                if (this.PurchaseOrderOrPromAllowed != null)
                    hash = hash * 59 + this.PurchaseOrderOrPromAllowed.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
