/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// SocialAccountInformation
    /// </summary>
    [DataContract]
    public partial class SocialAccountInformation :  IEquatable<SocialAccountInformation>, IValidatableObject
    {
        public SocialAccountInformation()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialAccountInformation" /> class.
        /// </summary>
        /// <param name="Email">The users email address..</param>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="Provider">The social account provider (Facebook, Yahoo, etc.).</param>
        /// <param name="SocialId">The ID provided by the Socal Account..</param>
        /// <param name="UserName">The full user name for the account..</param>
        public SocialAccountInformation(string Email = default(string), ErrorDetails ErrorDetails = default(ErrorDetails), string Provider = default(string), string SocialId = default(string), string UserName = default(string))
        {
            this.Email = Email;
            this.ErrorDetails = ErrorDetails;
            this.Provider = Provider;
            this.SocialId = SocialId;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// The users email address.
        /// </summary>
        /// <value>The users email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// The social account provider (Facebook, Yahoo, etc.)
        /// </summary>
        /// <value>The social account provider (Facebook, Yahoo, etc.)</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }
        /// <summary>
        /// The ID provided by the Socal Account.
        /// </summary>
        /// <value>The ID provided by the Socal Account.</value>
        [DataMember(Name="socialId", EmitDefaultValue=false)]
        public string SocialId { get; set; }
        /// <summary>
        /// The full user name for the account.
        /// </summary>
        /// <value>The full user name for the account.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialAccountInformation {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  SocialId: ").Append(SocialId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SocialAccountInformation);
        }

        /// <summary>
        /// Returns true if SocialAccountInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of SocialAccountInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialAccountInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.SocialId == other.SocialId ||
                    this.SocialId != null &&
                    this.SocialId.Equals(other.SocialId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.SocialId != null)
                    hash = hash * 59 + this.SocialId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
