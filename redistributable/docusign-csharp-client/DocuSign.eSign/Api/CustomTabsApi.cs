/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomTabsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns></returns>
        TabMetadata Create (string accountId, TabMetadata tabMetadata = null);

        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<TabMetadata> CreateWithHttpInfo (string accountId, TabMetadata tabMetadata = null);
        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns></returns>
        void Delete (string accountId, string customTabId);

        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns></returns>
        TabMetadata Get (string accountId, string customTabId);

        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<TabMetadata> GetWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        TabMetadataList List (string accountId, CustomTabsApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TabMetadataList> ListWithHttpInfo (string accountId, CustomTabsApi.ListOptions options = null);
        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns></returns>
        TabMetadata Update (string accountId, string customTabId, TabMetadata tabMetadata = null);

        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<TabMetadata> UpdateWithHttpInfo (string accountId, string customTabId, TabMetadata tabMetadata = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of TabMetadata</returns>
        System.Threading.Tasks.Task<TabMetadata> CreateAsync (string accountId, TabMetadata tabMetadata = null);

        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<TabMetadata>> CreateAsyncWithHttpInfo (string accountId, TabMetadata tabMetadata = null);
        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string accountId, string customTabId);

        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of TabMetadata</returns>
        System.Threading.Tasks.Task<TabMetadata> GetAsync (string accountId, string customTabId);

        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<TabMetadata>> GetAsyncWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of TabMetadataList</returns>
        System.Threading.Tasks.Task<TabMetadataList> ListAsync (string accountId, CustomTabsApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (TabMetadataList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TabMetadataList>> ListAsyncWithHttpInfo (string accountId, CustomTabsApi.ListOptions options = null);
        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of TabMetadata</returns>
        System.Threading.Tasks.Task<TabMetadata> UpdateAsync (string accountId, string customTabId, TabMetadata tabMetadata = null);

        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<TabMetadata>> UpdateAsyncWithHttpInfo (string accountId, string customTabId, TabMetadata tabMetadata = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomTabsApi : ICustomTabsApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTabsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomTabsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTabsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomTabsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }



        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>TabMetadata</returns>
        public TabMetadata Create (string accountId, TabMetadata tabMetadata = null)
        {
             ApiResponse<TabMetadata> localVarResponse = CreateWithHttpInfo(accountId, tabMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>ApiResponse of TabMetadata</returns>
        public ApiResponse< TabMetadata > CreateWithHttpInfo (string accountId, TabMetadata tabMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Create");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (tabMetadata != null && tabMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tabMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tabMetadata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(TabMetadata)));
            }
            else
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            }
            
        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of TabMetadata</returns>
        public async System.Threading.Tasks.Task<TabMetadata> CreateAsync (string accountId, TabMetadata tabMetadata = null)
        {
             ApiResponse<TabMetadata> localVarResponse = await CreateAsyncWithHttpInfo(accountId, tabMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TabMetadata>> CreateAsyncWithHttpInfo (string accountId, TabMetadata tabMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Create");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (tabMetadata != null && tabMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tabMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tabMetadata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            
        }



        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns></returns>
        public void Delete (string accountId, string customTabId)
        {
             DeleteWithHttpInfo(accountId, customTabId);
        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Delete");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Delete");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string accountId, string customTabId)
        {
             await DeleteAsyncWithHttpInfo(accountId, customTabId);

        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Delete");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Delete");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>TabMetadata</returns>
        public TabMetadata Get (string accountId, string customTabId)
        {
             ApiResponse<TabMetadata> localVarResponse = GetWithHttpInfo(accountId, customTabId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>ApiResponse of TabMetadata</returns>
        public ApiResponse< TabMetadata > GetWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Get");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Get");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(TabMetadata)));
            }
            else
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            }
            
        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of TabMetadata</returns>
        public async System.Threading.Tasks.Task<TabMetadata> GetAsync (string accountId, string customTabId)
        {
             ApiResponse<TabMetadata> localVarResponse = await GetAsyncWithHttpInfo(accountId, customTabId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TabMetadata>> GetAsyncWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Get");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Get");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            
        }


        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        public class ListOptions
        {
            /// When set to **true**, only custom tabs are returned in the response.  
            public string customTabOnly {get; set;}
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>TabMetadataList</returns>
        public TabMetadataList List (string accountId, CustomTabsApi.ListOptions options = null)
        {
             ApiResponse<TabMetadataList> localVarResponse = ListWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of TabMetadataList</returns>
        public ApiResponse< TabMetadataList > ListWithHttpInfo (string accountId, CustomTabsApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->List");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.customTabOnly != null) localVarQueryParams.Add("custom_tab_only", Configuration.ApiClient.ParameterToString(options.customTabOnly)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<TabMetadataList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadataList) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(TabMetadataList)));
            }
            else
            {
                return new ApiResponse<TabMetadataList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadataList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadataList)));
            }
            
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of TabMetadataList</returns>
        public async System.Threading.Tasks.Task<TabMetadataList> ListAsync (string accountId, CustomTabsApi.ListOptions options = null)
        {
             ApiResponse<TabMetadataList> localVarResponse = await ListAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (TabMetadataList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TabMetadataList>> ListAsyncWithHttpInfo (string accountId, CustomTabsApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->List");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.customTabOnly != null) localVarQueryParams.Add("custom_tab_only", Configuration.ApiClient.ParameterToString(options.customTabOnly)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadataList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadataList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadataList)));
            
        }



        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>TabMetadata</returns>
        public TabMetadata Update (string accountId, string customTabId, TabMetadata tabMetadata = null)
        {
             ApiResponse<TabMetadata> localVarResponse = UpdateWithHttpInfo(accountId, customTabId, tabMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>ApiResponse of TabMetadata</returns>
        public ApiResponse< TabMetadata > UpdateWithHttpInfo (string accountId, string customTabId, TabMetadata tabMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Update");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Update");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            if (tabMetadata != null && tabMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tabMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tabMetadata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(TabMetadata)));
            }
            else
            {
                return new ApiResponse<TabMetadata>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            }
            
        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of TabMetadata</returns>
        public async System.Threading.Tasks.Task<TabMetadata> UpdateAsync (string accountId, string customTabId, TabMetadata tabMetadata = null)
        {
             ApiResponse<TabMetadata> localVarResponse = await UpdateAsyncWithHttpInfo(accountId, customTabId, tabMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="customTabId"></param>
        /// <param name="tabMetadata"> (optional)</param>
        
        /// <returns>Task of ApiResponse (TabMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TabMetadata>> UpdateAsyncWithHttpInfo (string accountId, string customTabId, TabMetadata tabMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->Update");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->Update");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            if (tabMetadata != null && tabMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tabMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tabMetadata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadata)));
            
        }

    }
}
