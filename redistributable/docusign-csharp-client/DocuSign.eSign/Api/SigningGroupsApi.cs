/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISigningGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns></returns>
        SigningGroupInformation CreateList (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupInformation> CreateListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns></returns>
        SigningGroupInformation DeleteList (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupInformation> DeleteListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns></returns>
        SigningGroupUsers DeleteUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupUsers> DeleteUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns></returns>
        SigningGroup Get (string accountId, string signingGroupId);

        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroup> GetWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        SigningGroupInformation List (string accountId, SigningGroupsApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupInformation> ListWithHttpInfo (string accountId, SigningGroupsApi.ListOptions options = null);
        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns></returns>
        SigningGroupUsers ListUsers (string accountId, string signingGroupId);

        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupUsers> ListUsersWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns></returns>
        SigningGroup Update (string accountId, string signingGroupId, SigningGroup signingGroup = null);

        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroup> UpdateWithHttpInfo (string accountId, string signingGroupId, SigningGroup signingGroup = null);
        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns></returns>
        SigningGroupInformation UpdateList (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupInformation> UpdateListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns></returns>
        SigningGroupUsers UpdateUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SigningGroupUsers> UpdateUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> CreateListAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> CreateListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> DeleteListAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> DeleteListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> DeleteUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> DeleteUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of SigningGroup</returns>
        System.Threading.Tasks.Task<SigningGroup> GetAsync (string accountId, string signingGroupId);

        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of ApiResponse (SigningGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroup>> GetAsyncWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> ListAsync (string accountId, SigningGroupsApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> ListAsyncWithHttpInfo (string accountId, SigningGroupsApi.ListOptions options = null);
        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> ListUsersAsync (string accountId, string signingGroupId);

        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> ListUsersAsyncWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>Task of SigningGroup</returns>
        System.Threading.Tasks.Task<SigningGroup> UpdateAsync (string accountId, string signingGroupId, SigningGroup signingGroup = null);

        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroup>> UpdateAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroup signingGroup = null);
        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> UpdateListAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> UpdateListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> UpdateUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> UpdateUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SigningGroupsApi : ISigningGroupsApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SigningGroupsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SigningGroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }



        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation CreateList (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = CreateListWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > CreateListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->CreateList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupInformation)));
            }
            else
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            }
            
        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> CreateListAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await CreateListAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> CreateListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->CreateList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }



        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation DeleteList (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = DeleteListWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > DeleteListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->DeleteList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupInformation)));
            }
            else
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            }
            
        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> DeleteListAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await DeleteListAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> DeleteListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->DeleteList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }



        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers DeleteUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = DeleteUsersWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > DeleteUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->DeleteUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->DeleteUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupUsers)));
            }
            else
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            }
            
        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> DeleteUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await DeleteUsersAsyncWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> DeleteUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->DeleteUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->DeleteUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }



        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>SigningGroup</returns>
        public SigningGroup Get (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroup> localVarResponse = GetWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>ApiResponse of SigningGroup</returns>
        public ApiResponse< SigningGroup > GetWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->Get");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->Get");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroup>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroup)));
            }
            else
            {
                return new ApiResponse<SigningGroup>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroup)));
            }
            
        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of SigningGroup</returns>
        public async System.Threading.Tasks.Task<SigningGroup> GetAsync (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroup> localVarResponse = await GetAsyncWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of ApiResponse (SigningGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroup>> GetAsyncWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->Get");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->Get");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroup)));
            
        }


        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        public class ListOptions
        {
            /// 
            public string groupType {get; set;}
            /// When set to **true**, the response includes the signing group members.  
            public string includeUsers {get; set;}
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation List (string accountId, SigningGroupsApi.ListOptions options = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = ListWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > ListWithHttpInfo (string accountId, SigningGroupsApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->List");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.groupType != null) localVarQueryParams.Add("group_type", Configuration.ApiClient.ParameterToString(options.groupType)); // query parameter
                if (options.includeUsers != null) localVarQueryParams.Add("include_users", Configuration.ApiClient.ParameterToString(options.includeUsers)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupInformation)));
            }
            else
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            }
            
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> ListAsync (string accountId, SigningGroupsApi.ListOptions options = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await ListAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> ListAsyncWithHttpInfo (string accountId, SigningGroupsApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->List");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.groupType != null) localVarQueryParams.Add("group_type", Configuration.ApiClient.ParameterToString(options.groupType)); // query parameter
                if (options.includeUsers != null) localVarQueryParams.Add("include_users", Configuration.ApiClient.ParameterToString(options.includeUsers)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }



        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers ListUsers (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = ListUsersWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > ListUsersWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->ListUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->ListUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupUsers)));
            }
            else
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            }
            
        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> ListUsersAsync (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await ListUsersAsyncWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> ListUsersAsyncWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->ListUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->ListUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }



        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>SigningGroup</returns>
        public SigningGroup Update (string accountId, string signingGroupId, SigningGroup signingGroup = null)
        {
             ApiResponse<SigningGroup> localVarResponse = UpdateWithHttpInfo(accountId, signingGroupId, signingGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroup</returns>
        public ApiResponse< SigningGroup > UpdateWithHttpInfo (string accountId, string signingGroupId, SigningGroup signingGroup = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->Update");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->Update");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroup != null && signingGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroup>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroup)));
            }
            else
            {
                return new ApiResponse<SigningGroup>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroup)));
            }
            
        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>Task of SigningGroup</returns>
        public async System.Threading.Tasks.Task<SigningGroup> UpdateAsync (string accountId, string signingGroupId, SigningGroup signingGroup = null)
        {
             ApiResponse<SigningGroup> localVarResponse = await UpdateAsyncWithHttpInfo(accountId, signingGroupId, signingGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroup"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroup>> UpdateAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroup signingGroup = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->Update");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->Update");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroup != null && signingGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroup)));
            
        }



        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation UpdateList (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = UpdateListWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > UpdateListWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->UpdateList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupInformation)));
            }
            else
            {
                return new ApiResponse<SigningGroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            }
            
        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> UpdateListAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await UpdateListAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> UpdateListAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->UpdateList");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }



        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers UpdateUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = UpdateUsersWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > UpdateUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->UpdateUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->UpdateUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SigningGroupUsers)));
            }
            else
            {
                return new ApiResponse<SigningGroupUsers>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            }
            
        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> UpdateUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await UpdateUsersAsyncWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> UpdateUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->UpdateUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->UpdateUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

    }
}
