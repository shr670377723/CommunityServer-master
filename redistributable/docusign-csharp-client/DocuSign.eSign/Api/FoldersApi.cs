/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        FoldersResponse List (string accountId, FoldersApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FoldersResponse> ListWithHttpInfo (string accountId, FoldersApi.ListOptions options = null);
        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        FolderItemsResponse ListItems (string accountId, string folderId, FoldersApi.ListItemsOptions options = null);

        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FolderItemsResponse> ListItemsWithHttpInfo (string accountId, string folderId, FoldersApi.ListItemsOptions options = null);
        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves envelopes to the specified folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns></returns>
        FoldersResponse MoveEnvelopes (string accountId, string folderId, FoldersRequest foldersRequest = null);

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves envelopes to the specified folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<FoldersResponse> MoveEnvelopesWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null);
        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        FolderItemResponse Search (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null);

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FolderItemResponse> SearchWithHttpInfo (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FoldersResponse</returns>
        System.Threading.Tasks.Task<FoldersResponse> ListAsync (string accountId, FoldersApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FoldersResponse>> ListAsyncWithHttpInfo (string accountId, FoldersApi.ListOptions options = null);
        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FolderItemsResponse</returns>
        System.Threading.Tasks.Task<FolderItemsResponse> ListItemsAsync (string accountId, string folderId, FoldersApi.ListItemsOptions options = null);

        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FolderItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderItemsResponse>> ListItemsAsyncWithHttpInfo (string accountId, string folderId, FoldersApi.ListItemsOptions options = null);
        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves envelopes to the specified folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>Task of FoldersResponse</returns>
        System.Threading.Tasks.Task<FoldersResponse> MoveEnvelopesAsync (string accountId, string folderId, FoldersRequest foldersRequest = null);

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves envelopes to the specified folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (FoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FoldersResponse>> MoveEnvelopesAsyncWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null);
        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FolderItemResponse</returns>
        System.Threading.Tasks.Task<FolderItemResponse> SearchAsync (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null);

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FolderItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderItemResponse>> SearchAsyncWithHttpInfo (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DocuSign.eSign.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }


        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        public class ListOptions
        {
            /// 
            public string include {get; set;}
            /// 
            public string startPosition {get; set;}
            /// Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. 
            public string template {get; set;}
            /// 
            public string userFilter {get; set;}
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>FoldersResponse</returns>
        public FoldersResponse List (string accountId, FoldersApi.ListOptions options = null)
        {
             ApiResponse<FoldersResponse> localVarResponse = ListWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of FoldersResponse</returns>
        public ApiResponse< FoldersResponse > ListWithHttpInfo (string accountId, FoldersApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->List");

            var localVarPath = "/v2/accounts/{accountId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(options.include)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.template != null) localVarQueryParams.Add("template", Configuration.ApiClient.ParameterToString(options.template)); // query parameter
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(options.userFilter)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FoldersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FoldersResponse)));
            }
            else
            {
                return new ApiResponse<FoldersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FoldersResponse)));
            }
            
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FoldersResponse</returns>
        public async System.Threading.Tasks.Task<FoldersResponse> ListAsync (string accountId, FoldersApi.ListOptions options = null)
        {
             ApiResponse<FoldersResponse> localVarResponse = await ListAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FoldersResponse>> ListAsyncWithHttpInfo (string accountId, FoldersApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->List");

            var localVarPath = "/v2/accounts/{accountId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(options.include)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.template != null) localVarQueryParams.Add("template", Configuration.ApiClient.ParameterToString(options.template)); // query parameter
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(options.userFilter)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FoldersResponse)));
            
        }


        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        public class ListItemsOptions
        {
            ///  Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  
            public string fromDate {get; set;}
            ///  The email of the folder owner.  
            public string ownerEmail {get; set;}
            ///  The name of the folder owner.  
            public string ownerName {get; set;}
            ///  The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  
            public string searchText {get; set;}
            /// The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. 
            public string startPosition {get; set;}
            /// The current status of the envelope. If no value is provided, the default search is all/any status. 
            public string status {get; set;}
            /// Only return items up to this date. If no value is provided, the default search is to the current date. 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>FolderItemsResponse</returns>
        public FolderItemsResponse ListItems (string accountId, string folderId, FoldersApi.ListItemsOptions options = null)
        {
             ApiResponse<FolderItemsResponse> localVarResponse = ListItemsWithHttpInfo(accountId, folderId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of FolderItemsResponse</returns>
        public ApiResponse< FolderItemsResponse > ListItemsWithHttpInfo (string accountId, string folderId, FoldersApi.ListItemsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->ListItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListItems");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.ownerEmail != null) localVarQueryParams.Add("owner_email", Configuration.ApiClient.ParameterToString(options.ownerEmail)); // query parameter
                if (options.ownerName != null) localVarQueryParams.Add("owner_name", Configuration.ApiClient.ParameterToString(options.ownerName)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(options.toDate)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FolderItemsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FolderItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FolderItemsResponse)));
            }
            else
            {
                return new ApiResponse<FolderItemsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FolderItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemsResponse)));
            }
            
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FolderItemsResponse</returns>
        public async System.Threading.Tasks.Task<FolderItemsResponse> ListItemsAsync (string accountId, string folderId, FoldersApi.ListItemsOptions options = null)
        {
             ApiResponse<FolderItemsResponse> localVarResponse = await ListItemsAsyncWithHttpInfo(accountId, folderId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FolderItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderItemsResponse>> ListItemsAsyncWithHttpInfo (string accountId, string folderId, FoldersApi.ListItemsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->ListItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListItems");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.ownerEmail != null) localVarQueryParams.Add("owner_email", Configuration.ApiClient.ParameterToString(options.ownerEmail)); // query parameter
                if (options.ownerName != null) localVarQueryParams.Add("owner_name", Configuration.ApiClient.ParameterToString(options.ownerName)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(options.toDate)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemsResponse)));
            
        }



        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves envelopes to the specified folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>FoldersResponse</returns>
        public FoldersResponse MoveEnvelopes (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
             ApiResponse<FoldersResponse> localVarResponse = MoveEnvelopesWithHttpInfo(accountId, folderId, foldersRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves envelopes to the specified folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>ApiResponse of FoldersResponse</returns>
        public ApiResponse< FoldersResponse > MoveEnvelopesWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->MoveEnvelopes");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->MoveEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            if (foldersRequest != null && foldersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(foldersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = foldersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FoldersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FoldersResponse)));
            }
            else
            {
                return new ApiResponse<FoldersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FoldersResponse)));
            }
            
        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves envelopes to the specified folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>Task of FoldersResponse</returns>
        public async System.Threading.Tasks.Task<FoldersResponse> MoveEnvelopesAsync (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
             ApiResponse<FoldersResponse> localVarResponse = await MoveEnvelopesAsyncWithHttpInfo(accountId, folderId, foldersRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves envelopes to the specified folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (FoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FoldersResponse>> MoveEnvelopesAsyncWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->MoveEnvelopes");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->MoveEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            if (foldersRequest != null && foldersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(foldersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = foldersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FoldersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FoldersResponse)));
            
        }


        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        public class SearchOptions
        {
            /// Specifies that all envelopes that match the criteria are returned. 
            public string all {get; set;}
            /// Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. 
            public string count {get; set;}
            /// Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. 
            public string fromDate {get; set;}
            /// When set to **true**, the recipient information is returned in the response. 
            public string includeRecipients {get; set;}
            /// Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. 
            public string order {get; set;}
            /// Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. 
            public string orderBy {get; set;}
            /// Specifies the the starting location in the result set of the items that are returned. 
            public string startPosition {get; set;}
            /// Specifies the end of the date range to return. 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>FolderItemResponse</returns>
        public FolderItemResponse Search (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null)
        {
             ApiResponse<FolderItemResponse> localVarResponse = SearchWithHttpInfo(accountId, searchFolderId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of FolderItemResponse</returns>
        public ApiResponse< FolderItemResponse > SearchWithHttpInfo (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->Search");
            // verify the required parameter 'searchFolderId' is set
            if (searchFolderId == null)
                throw new ApiException(400, "Missing required parameter 'searchFolderId' when calling FoldersApi->Search");

            var localVarPath = "/v2/accounts/{accountId}/search_folders/{searchFolderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchFolderId != null) localVarPathParams.Add("searchFolderId", Configuration.ApiClient.ParameterToString(searchFolderId)); // path parameter

            if (options != null)
            {
                if (options.all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(options.all)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.includeRecipients != null) localVarQueryParams.Add("include_recipients", Configuration.ApiClient.ParameterToString(options.includeRecipients)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(options.toDate)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FolderItemResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FolderItemResponse) Configuration.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FolderItemResponse)));
            }
            else
            {
                return new ApiResponse<FolderItemResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FolderItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemResponse)));
            }
            
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FolderItemResponse</returns>
        public async System.Threading.Tasks.Task<FolderItemResponse> SearchAsync (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null)
        {
             ApiResponse<FolderItemResponse> localVarResponse = await SearchAsyncWithHttpInfo(accountId, searchFolderId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>/// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FolderItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderItemResponse>> SearchAsyncWithHttpInfo (string accountId, string searchFolderId, FoldersApi.SearchOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->Search");
            // verify the required parameter 'searchFolderId' is set
            if (searchFolderId == null)
                throw new ApiException(400, "Missing required parameter 'searchFolderId' when calling FoldersApi->Search");

            var localVarPath = "/v2/accounts/{accountId}/search_folders/{searchFolderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchFolderId != null) localVarPathParams.Add("searchFolderId", Configuration.ApiClient.ParameterToString(searchFolderId)); // path parameter

            if (options != null)
            {
                if (options.all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(options.all)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.includeRecipients != null) localVarQueryParams.Add("include_recipients", Configuration.ApiClient.ParameterToString(options.includeRecipients)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(options.toDate)); // query parameter
            }



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemResponse)));
            
        }

    }
}
