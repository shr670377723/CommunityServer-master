// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Threading;

using Microsoft.Graph;

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.OneDrive.Sdk
{
    /// <summary>
    /// The type ItemRequest.
    /// </summary>
    public partial class ItemRequest : BaseRequest, IItemRequest
    {
        /// <summary>
        /// Constructs a new ItemRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public ItemRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
            //this.SdkVersionHeaderPrefix = "onedrive";
        }

        /// <summary>
        /// Creates the specified Item using PUT.
        /// </summary>
        /// <param name="itemToCreate">The Item to create.</param>
        /// <returns>The created Item.</returns>
        public System.Threading.Tasks.Task<Item> CreateAsync(Item itemToCreate)
        {
            return this.CreateAsync(itemToCreate, CancellationToken.None);
        }

        /// <summary>
        /// Creates the specified Item using PUT.
        /// </summary>
        /// <param name="itemToCreate">The Item to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created Item.</returns>
        public async System.Threading.Tasks.Task<Item> CreateAsync(Item itemToCreate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PUT";
            var newEntity = await this.SendAsync<Item>(itemToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Deletes the specified Item.
        /// </summary>
        /// <returns>The task to await.</returns>
        public System.Threading.Tasks.Task DeleteAsync()
        {
            return this.DeleteAsync(CancellationToken.None);
        }

        /// <summary>
        /// Deletes the specified Item.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken)
        {
            this.Method = "DELETE";
            await this.SendAsync<Item>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Item.
        /// </summary>
        /// <returns>The Item.</returns>
        public System.Threading.Tasks.Task<Item> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified Item.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The Item.</returns>
        public async System.Threading.Tasks.Task<Item> GetAsync(CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var retrievedEntity = await this.SendAsync<Item>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Updates the specified Item using PATCH.
        /// </summary>
        /// <param name="itemToUpdate">The Item to update.</param>
        /// <returns>The updated Item.</returns>
        public System.Threading.Tasks.Task<Item> UpdateAsync(Item itemToUpdate)
        {
            return this.UpdateAsync(itemToUpdate, CancellationToken.None);
        }

        /// <summary>
        /// Updates the specified Item using PATCH.
        /// </summary>
        /// <param name="itemToUpdate">The Item to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated Item.</returns>
        public async System.Threading.Tasks.Task<Item> UpdateAsync(Item itemToUpdate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var updatedEntity = await this.SendAsync<Item>(itemToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IItemRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IItemRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="itemToInitialize">The <see cref="Item"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Item itemToInitialize)
        {

            if (itemToInitialize != null && itemToInitialize.AdditionalData != null)
            {

                if (itemToInitialize.Permissions != null && itemToInitialize.Permissions.CurrentPage != null)
                {
                    itemToInitialize.Permissions.AdditionalData = itemToInitialize.AdditionalData;

                    object nextPageLink;
                    itemToInitialize.AdditionalData.TryGetValue("permissions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        itemToInitialize.Permissions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (itemToInitialize.Versions != null && itemToInitialize.Versions.CurrentPage != null)
                {
                    itemToInitialize.Versions.AdditionalData = itemToInitialize.AdditionalData;

                    object nextPageLink;
                    itemToInitialize.AdditionalData.TryGetValue("versions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        itemToInitialize.Versions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (itemToInitialize.Children != null && itemToInitialize.Children.CurrentPage != null)
                {
                    itemToInitialize.Children.AdditionalData = itemToInitialize.AdditionalData;

                    object nextPageLink;
                    itemToInitialize.AdditionalData.TryGetValue("children@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        itemToInitialize.Children.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

                if (itemToInitialize.Thumbnails != null && itemToInitialize.Thumbnails.CurrentPage != null)
                {
                    itemToInitialize.Thumbnails.AdditionalData = itemToInitialize.AdditionalData;

                    object nextPageLink;
                    itemToInitialize.AdditionalData.TryGetValue("thumbnails@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        itemToInitialize.Thumbnails.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }

            }


        }
    }
}
