<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="XMLTRANSFORMATION_AmbiguousTypeMatch" xml:space="preserve">
    <value>Type '{0}' was found in more than one assembly</value>
  </data>
  <data name="XMLTRANSFORMATION_BadAttributeValue" xml:space="preserve">
    <value>Transform and Locator attributes must contain only a type name, or a type name followed by a list of attributes in parentheses.</value>
  </data>
  <data name="XMLTRANSFORMATION_FatalTransformSyntaxError" xml:space="preserve">
    <value>Fatal syntax error</value>
  </data>
  <data name="XMLTRANSFORMATION_ImportAttributeConflict" xml:space="preserve">
    <value>Import tag cannot have both a 'path' and an 'assembly'</value>
  </data>
  <data name="XMLTRANSFORMATION_ImportMissingAssembly" xml:space="preserve">
    <value>Import tag must have a 'path' or an 'assembly'</value>
  </data>
  <data name="XMLTRANSFORMATION_ImportMissingNamespace" xml:space="preserve">
    <value>Import tag must have a 'namespace'</value>
  </data>
  <data name="XMLTRANSFORMATION_ImportUnknownAttribute" xml:space="preserve">
    <value>Import tag does not support '{0}' attribute</value>
  </data>
  <data name="XMLTRANSFORMATION_IncorrectBaseType" xml:space="preserve">
    <value>'{0}' is not a type of {1}</value>
  </data>
  <data name="XMLTRANSFORMATION_InsertBadXPath" xml:space="preserve">
    <value>No element in the source document matches '{0}'</value>
  </data>
  <data name="XMLTRANSFORMATION_InsertBadXPathResult" xml:space="preserve">
    <value>'{0}' does not evaluate to an element</value>
  </data>
  <data name="XMLTRANSFORMATION_InsertMissingArgument" xml:space="preserve">
    <value>{0} requires an XPath argument</value>
  </data>
  <data name="XMLTRANSFORMATION_InsertTooManyArguments" xml:space="preserve">
    <value>Too many arguments to {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_MatchAttributeDoesNotExist" xml:space="preserve">
    <value>No attribute '{0}' exists for the Match Locator</value>
  </data>
  <data name="XMLTRANSFORMATION_NoValidConstructor" xml:space="preserve">
    <value>Type '{0}' must have a no-argument constructor to be instantiated by the transformation engine</value>
  </data>
  <data name="XMLTRANSFORMATION_RequiresMinimumArguments" xml:space="preserve">
    <value>{0} requires at least {1} arguments</value>
  </data>
  <data name="XMLTRANSFORMATION_RequiresExactArguments" xml:space="preserve">
    <value>{0} requires exactly {1} arguments</value>
  </data>
  <data name="XMLTRANSFORMATION_TooManyArguments" xml:space="preserve">
    <value>Too many arguments for {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformArgumentFoundNoAttributes" xml:space="preserve">
    <value>Argument '{0}' did not match any attributes</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformBeginExecutingMessage" xml:space="preserve">
    <value>Executing {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformDoesNotExpectArguments" xml:space="preserve">
    <value>{0} does not expect arguments; ignoring</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformEndExecutingMessage" xml:space="preserve">
    <value>Done executing {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformErrorExecutingMessage" xml:space="preserve">
    <value>Error during {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageInsert" xml:space="preserve">
    <value>Inserted '{0}' element</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageNoRemoveAttributes" xml:space="preserve">
    <value>No attributes found to remove</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageNoSetAttributes" xml:space="preserve">
    <value>No attributes found to set</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageRemove" xml:space="preserve">
    <value>Removed '{0}' element</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageRemoveAttribute" xml:space="preserve">
    <value>Removed '{0}' attribute</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageRemoveAttributes" xml:space="preserve">
    <value>Removed {0} attributes</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageReplace" xml:space="preserve">
    <value>Replaced '{0}' element</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageSetAttribute" xml:space="preserve">
    <value>Set '{0}' attribute</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformMessageSetAttributes" xml:space="preserve">
    <value>Set {0} attributes</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformNameFormatLong" xml:space="preserve">
    <value>{0} (transform line {1}, {2})</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformNameFormatShort" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformNoMatchingTargetNodes" xml:space="preserve">
    <value>No element in the source document matches '{0}'</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformNotExecutingMessage" xml:space="preserve">
    <value>Not executing {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformOnlyAppliesOnce" xml:space="preserve">
    <value>Found multiple target elements, but the '{0}' Transform only applies to the first match</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformSourceMatchWasRemoved" xml:space="preserve">
    <value>'{0}' did not find a match, because matching nodes in the source document were modified or removed by a previous transform</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformStatusApplyTarget" xml:space="preserve">
    <value>Applying to '{0}' element (source line {1}, {2})</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformStatusApplyTargetNoLineInfo" xml:space="preserve">
    <value>Applying to '{0}' element (no source line info)</value>
  </data>
  <data name="XMLTRANSFORMATION_TransformStatusXPath" xml:space="preserve">
    <value>on {0}</value>
  </data>
  <data name="XMLTRANSFORMATION_UnknownTypeName" xml:space="preserve">
    <value>Could not resolve '{0}' as a type of {1}</value>
  </data>
  <data name="XMLTRANSFORMATION_UnknownXdtTag" xml:space="preserve">
    <value>Unknown tag '{0}'</value>
  </data>
</root>