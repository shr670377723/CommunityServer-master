#!/bin/sh
# postrm script for {{package_sysname}}
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

if [ "$1" = purge ] && [ -e /usr/share/debconf/confmodule ]; then
. /usr/share/debconf/confmodule
fi

case "$1" in
	purge)
		db_input high {{package_sysname}}-communityserver/remove-db || true
		db_go
		db_get {{package_sysname}}-communityserver/remove-db
		if [ "$RET" = "true" ]; then
			db_get {{package_sysname}}-communityserver/db-host
			DB_HOST="$RET"
			db_get {{package_sysname}}-communityserver/db-user
			DB_USER="$RET"
			db_get {{package_sysname}}-communityserver/db-pwd
			DB_PWD="$RET"
			db_get {{package_sysname}}-communityserver/db-name
			DB_NAME="$RET"

			MYSQL="mysql -h$DB_HOST -u$DB_USER"
			if [ -n "$DB_PWD" ]; then
				MYSQL="$MYSQL -p$DB_PWD"
			fi

			$MYSQL -e "DROP DATABASE IF EXISTS $DB_NAME;" &>/dev/null || { echo "WARNING: can't delete {{package_sysname}} database" >&2; }
		fi
	;;

	remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
	;;

	*)
		echo "postrm called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0